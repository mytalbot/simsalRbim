simOpt          = simOpt,
randOP          = TRUE,
showPlot        = FALSE,
intrans         = FALSE)
w
D       <- NULL
w       <- bimworth(ydata           = ydata,
GT              = GT,
simOpt          = simOpt,
randOP          = TRUE,
showPlot        = FALSE,
intrans         = FALSE)
w
D       <- NULL
w       <- bimworth(ydata           = ydata,
GT              = GT,
simOpt          = simOpt,
randOP          = TRUE,
showPlot        = FALSE,
intrans         = FALSE)
w
# calcualte uncertainty
options(warn=-1)
w_errors   <- bimeval(ydata=ydata, worth= w, GT=GT, simOpt=simOpt, showPlot = FALSE )
options(warn=0)
w_errors
D       <- NULL
w       <- bimworth(ydata           = ydata,
GT              = GT,
simOpt          = simOpt,
randOP          = TRUE,
showPlot        = FALSE,
intrans         = FALSE)
w
# calcualte uncertainty
options(warn=-1)
w_errors   <- bimeval(ydata=ydata, worth= w, GT=GT, simOpt=simOpt, showPlot = FALSE )
options(warn=0)
w_errors
ydata
# Helperfunction
printf <- function(...) cat(sprintf(...))
# variable definition
worth      <- pos <- NULL
# use seeding?
if(seed==TRUE){
set.seed(123)
}else{}
# do the simulation
reps    <- limitToRun
deviate <- 0
W       <- NULL
D       <- NULL
for(i in 1:reps){
D       <- NULL
w       <- bimworth(ydata           = ydata,
GT              = GT,
simOpt          = simOpt,
randOP          = TRUE,
showPlot        = FALSE,
intrans         = TRUE)
D <- rbind(D, data.frame(run        = i,
Icounts    = w$I$intranscount,
triplets   = w$I$no_tripl,
Iratio     = w$I$Iratio,
item       = rownames(w$worth),
worth      = as.numeric(w$worth)))
d <- D %>%
arrange(desc(worth)) %>%
mutate(pos = 1:n()) %>%
as.data.frame()
W <- rbind(W, d)
}
seed=TRUE
# Helperfunction
printf <- function(...) cat(sprintf(...))
# variable definition
worth      <- pos <- NULL
# use seeding?
if(seed==TRUE){
set.seed(123)
}else{}
# do the simulation
reps    <- limitToRun
deviate <- 0
W       <- NULL
D       <- NULL
for(i in 1:reps){
D       <- NULL
w       <- bimworth(ydata           = ydata,
GT              = GT,
simOpt          = simOpt,
randOP          = TRUE,
showPlot        = FALSE,
intrans         = TRUE)
D <- rbind(D, data.frame(run        = i,
Icounts    = w$I$intranscount,
triplets   = w$I$no_tripl,
Iratio     = w$I$Iratio,
item       = rownames(w$worth),
worth      = as.numeric(w$worth)))
d <- D %>%
arrange(desc(worth)) %>%
mutate(pos = 1:n()) %>%
as.data.frame()
W <- rbind(W, d)
}
W
# add to X-scale for better optics
L    <- length(GT) + 1
# Plot
p  <- W %>%
filter(item %in% simOpt) %>%
filter(Iratio <= fval) %>%
ggplot(aes(x=factor(pos), y=worth)) +
geom_jitter( aes(size = uncert, fill =  uncert),  shape = 21, alpha = 0.7,
width=0.2) +
ylim(0,0.7) +
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(0, L+1  )) + # adjust this
xlab("Position") +
ylab("Mean Worth Value")   +
labs(title    = "Informed position simulation",
subtitle = paste("Item: ",simOpt, " at ", limitToRun,
" randomizations (Iratio cutoff=",fval,").", sep=""),
legend   = "Intransitivity Ratio") +
theme_bw() +
theme(axis.title.x = element_text(hjust= 0.5)) +
theme(axis.title.y = element_text(hjust= 0.5)) +
scale_x_discrete(limits = factor(1:L ))
p <- p +  theme(legend.position  = "top")
p
# add to X-scale for better optics
L    <- length(GT) + 1
# Plot
p  <- W %>%
filter(item %in% simOpt) %>%
filter(Iratio <= fval) %>%
ggplot(aes(x=factor(pos), y=worth)) +
geom_jitter( aes(size = Iratio, fill =  Iratio),  shape = 21, alpha = 0.7,
width=0.2) +
ylim(0,0.7) +
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(0, L+1  )) + # adjust this
xlab("Position") +
ylab("Mean Worth Value")   +
labs(title    = "Informed position simulation",
subtitle = paste("Item: ",simOpt, " at ", limitToRun,
" randomizations (Iratio cutoff=",fval,").", sep=""),
legend   = "Intransitivity Ratio") +
theme_bw() +
theme(axis.title.x = element_text(hjust= 0.5)) +
theme(axis.title.y = element_text(hjust= 0.5)) +
scale_x_discrete(limits = factor(1:L ))
p <- p +  theme(legend.position  = "top")
p
library(simsalRbim)
# Introduction of a new item with restricted measurements -----------------
# Import from a fresh file w/ Coke items
# and 1 Tie
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c( "Huehner", "Kacke",  "Zicke","Zacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
w_errors   <- bimeval(ydata=predat, worth= worth$worth, GT=GT, simOpt=simOpt )
w_errors
subtitle<- NULL
length(subtitle)
library(simsalRbim)
library(simsalRbim)
library(simsalRbim)
# Introduction of a new item with restricted measurements -----------------
# Import from a fresh file w/ Coke items
# and 1 Tie
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c( "Huehner", "Kacke",  "Zicke","Zacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
w_errors   <- bimeval(ydata=predat, worth= worth$worth, GT=GT, simOpt=simOpt )
w_errors
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c( "Huehner", "Kacke",  "Zicke","Zacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
w_errors   <- bimeval(ydata=predat, worth= worth$worth, GT=GT, simOpt=simOpt )
w_errors
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c( "Huehner", "Kacke",  "Zicke","Zacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
w_errors   <- bimeval(ydata=predat, worth= worth$worth, GT=GT, simOpt=simOpt )
w_errors
ydata=predat
worth= worth$worth
GT=GT
simOpt=simOpt
predat     <- ydata
optionlist <- c(simOpt, GT)
# compute the decision matrix for all data combinations in the predat object
TT <- NULL
for(i in 1:length(unique(predat$test))){
tt <- data.frame(test   = as.character(unique(predat[predat$test==unique(predat$test)[i], "test"])),
pct_first      = sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100,
pct_second     = 100 - (sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100))
TT <- rbind(TT, tt)
}
# check subjects data coverage - results may be underrepresented!
BB        <- predat[grepl(simOpt,predat$test, fixed = TRUE),  ]
provided  <- length(unique(BB$subjectID[BB$tie == FALSE   ]))
simulated <- length(unique(BB$subjectID[BB$tie != FALSE   ]))
subjratio <- provided/(simulated + provided)
# item coverage
II              <- predat[grepl(simOpt, predat$test, fixed = TRUE),]
items_provided  <- length(unique(II$test [II$tie == FALSE   ]))
items_simulated <- length(unique(II$test [II$tie != FALSE   ]))
itemratio       <- items_provided/(items_simulated + items_provided)
# warning: too few subjects
if((subjratio)<coverage){
warning(paste("simsalRbim: ","No. of SUBJECTS WARNING!
The number of subjects you have provided for testing the simOpt=", "'", simOpt,"'" ," item is probably insufficient!
Try increasing the number of subjects.
You are currently below ", coverage*100, "% data coverage for that item.
Your provided-to-simulated subjects ratio is at: ",
round(subjratio,4) * 100, "%.\n", sep=""))
}else{}
# warning if too few item combinations
if((itemratio)<coverage){
warning(paste("simsalRbim: ","No. of ITEMS WARNING!
The number of item tests you have provided for testing the simOpt=", "'", simOpt,"'" ," item is probably insufficient!
Try increasing the number of item combinations.
You are currently below ", coverage*100, "% item coverage for that item.
Your provided-to-simulated items ratio is at: ",
round(itemratio,4) * 100, "%.\n", sep=""))
}else{}
coverage=0.8
# warning: too few subjects
if((subjratio)<coverage){
warning(paste("simsalRbim: ","No. of SUBJECTS WARNING!
The number of subjects you have provided for testing the simOpt=", "'", simOpt,"'" ," item is probably insufficient!
Try increasing the number of subjects.
You are currently below ", coverage*100, "% data coverage for that item.
Your provided-to-simulated subjects ratio is at: ",
round(subjratio,4) * 100, "%.\n", sep=""))
}else{}
# warning if too few item combinations
if((itemratio)<coverage){
warning(paste("simsalRbim: ","No. of ITEMS WARNING!
The number of item tests you have provided for testing the simOpt=", "'", simOpt,"'" ," item is probably insufficient!
Try increasing the number of item combinations.
You are currently below ", coverage*100, "% item coverage for that item.
Your provided-to-simulated items ratio is at: ",
round(itemratio,4) * 100, "%.\n", sep=""))
}else{}
# calculate the mean deviation weights
weights    <- NULL
for(j in 1:length(optionlist)){
item  <- TT[grepl(optionlist[j], TT$test, fixed = TRUE),]
liste <- NULL
for(i in 1:dim(item)[1]){
if( item[i, "pct_first" ] > item[i, "pct_second" ]  ){
delta  <- (50 - item[i, "pct_second" ])
}else{
delta <- (50 - item[i, "pct_first" ])
}
liste    <- rbind(liste, data.frame(item =optionlist[j], delta = delta))
}
mean_delta <- mean(liste$delta, na.rm = TRUE)
sd_delta   <- sd  (liste$delta, na.rm = TRUE)
n_delta    <- length(liste$delta)
lwr        <- mean_delta - qt(0.975,df=length(liste$delta)-1)*sd  (liste$delta, na.rm = TRUE)/sqrt(length(liste$delta))
upr        <- mean_delta + qt(0.975,df=length(liste$delta)-1)*sd  (liste$delta, na.rm = TRUE)/sqrt(length(liste$delta))
weights    <- rbind(weights, data.frame(item       = optionlist[j],
mean_delta = mean_delta))#,
#sd_delta   = sd_delta,
#n          = n_delta,
#lwr        = lwr,
#upr        = upr ))
}
weights
weights.sorted <- weights[order(rownames(weights)),]
W              <- cbind(weights.sorted ,
worth = worth[match(weights.sorted$item, rownames(worth)),])
W
W$uncert       <- round((50-W$mean_delta)/50*100,2)
W$label        <- paste(W$item," ", round((50-W$mean_delta)/50*100,2), "%",sep="")
W
# subtitle changes at user input
if(length(subtitle)==0){
subtitle <- paste("Bubble sizes indicate uncertainty in item choice (total=",round(mean(W$uncert),2),"%)",sep="")
}else{
subtitle <- subtitle
}
subtitle
# setting the bubble color palette
cols <- viridis_pal(option = "D")(length(W$item))
p <- ggplot(W, aes(x=rep(1,dim(W)[1]), y=worth) ) +
geom_point( aes(size = (50-mean_delta)/50*100), color="black", shape=21, fill=cols ) +
geom_line()
p
ggplot(W, aes(x=rep(1,dim(W)[1]), y=worth) ) +
geom_point( aes(size = (50-mean_delta)/50*100), color="black", shape=21, fill=cols ) +
geom_line() +
labs(title     = title,
subtitle  = subtitle,
size      = "Consensus error (%)")
title
title="Consensus Analysis"
ggplot(W, aes(x=rep(1,dim(W)[1]), y=worth) ) +
geom_point( aes(size = (50-mean_delta)/50*100), color="black", shape=21, fill=cols ) +
geom_line() +
labs(title     = title,
subtitle  = subtitle,
size      = "Consensus error (%)")
ggplot(W, aes(x=rep(1,dim(W)[1]), y=worth) ) +
geom_point( aes(size = (50-mean_delta)/50*100), color="black", shape=21, fill=cols ) +
geom_line() +
labs(title     = title,
subtitle  = subtitle,
size      = "Consensus error (%)") +
ylim(ylim)
ylim
ylim=c(0,0.6)
ggplot(W, aes(x=rep(1,dim(W)[1]), y=worth) ) +
geom_point( aes(size = (50-mean_delta)/50*100), color="black", shape=21, fill=cols ) +
geom_line() +
labs(title     = title,
subtitle  = subtitle,
size      = "Consensus error (%)") +
ylim(ylim)
ggplot(W, aes(x=rep(1,dim(W)[1]), y=worth) ) +
geom_point( aes(size = (50-mean_delta)/50*100), color="black", shape=21, fill=cols ) +
geom_line() +
labs(title     = title,
subtitle  = subtitle,
size      = "Consensus error (%)") +
# ylim(ylim) +
ylab("Mean Worth Value") +
xlab("worth")  +
theme_bw()
ggplot(W, aes(x=rep(1,dim(W)[1]), y=worth) ) +
geom_point( aes(size = (50-mean_delta)/50*100), color="black", shape=21, fill=cols ) +
geom_line() +
labs(title     = title,
subtitle  = subtitle,
size      = "Consensus error (%)") +
ylab("Mean Worth Value") +
xlab("worth")  +
theme_bw() +
scale_x_discrete(limits = factor(1 ))
#p <- p + scale_size(range = c(0, 10))
p <- p +  theme(legend.position         = "top")
p <- p + geom_label_repel(aes(label     = label),
size          = 4,
box.padding   = unit(0.6, "lines"),
point.padding = unit(0.6, "lines"),
show.legend   = FALSE )
print(p)
subtitle
title
ggplot(W, aes(x=rep(1,dim(W)[1]), y=worth) ) +
geom_point( aes(size = (50-mean_delta)/50*100), color="black", shape=21, fill=cols ) +
geom_line() +
labs(title     = title,
subtitle  = subtitle,
size      = "Consensus error (%)") +
ylab("Mean Worth Value") +
xlab("worth")  +
theme_bw()
p <- ggplot(W, aes(x=rep(1,dim(W)[1]), y=worth) ) +
geom_point( aes(size = (50-mean_delta)/50*100), color="black", shape=21, fill=cols ) +
geom_line() +
labs(title     = title,
subtitle  = subtitle,
size      = "Consensus error (%)") +
ylab("Mean Worth Value") +
xlab("worth")  +
theme_bw() +
scale_x_discrete(limits = factor(1 ))
#p <- p + scale_size(range = c(0, 10))
p <- p +  theme(legend.position         = "top")
p <- p + geom_label_repel(aes(label     = label),
size          = 4,
box.padding   = unit(0.6, "lines"),
point.padding = unit(0.6, "lines"),
show.legend   = FALSE )
print(p)
library(simsalRbim)
# Introduction of a new item with restricted measurements -----------------
# Import from a fresh file w/ Coke items
# and 1 Tie
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c( "Huehner", "Kacke",  "Zicke","Zacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
w_errors   <- bimeval(ydata=predat, worth= worth$worth, GT=GT, simOpt=simOpt )
w_errors
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
# Introduction of a new item with restricted measurements -----------------
# Import from a fresh file w/ Coke items
# and 1 Tie
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c( "Huehner", "Kacke",  "Zicke","Zacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
w_errors   <- bimeval(ydata=predat, worth= worth$worth, GT=GT, simOpt=simOpt )
w_errors
# Introduction of a new item with restricted measurements -----------------
# Import from a fresh file w/ Coke items
# and 1 Tie
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c( "Huehner", "Kacke",  "Zicke","Zacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
w_errors   <- bimeval(ydata=predat, worth= worth$worth, GT=GT, simOpt=simOpt )
w_errors
predat
predat$tie
predat
predat[predat$tie==TRUE,]
library(simsalRbim)
library(kableExtra)
install.packages("kableExtra")
frqnc      <- bimsim(ydata       = predat,
GT          = GT,
simOpt      = simOpt,
limitToRun  = 78,
fval        = 0.25,
showPlot    = TRUE,
ylim        = c(0,0.7))
frqnc      <- bimsim(ydata = predat, GT=GT, simOpt=simOpt, limitToRun=78, fval= 1, showPlot=TRUE, ylim=c(0,0.7))
frqnc$frq
# now the informed simulation
frqnc      <- bimsim(ydata = predat, GT=GT, simOpt=simOpt, limitToRun=78, fval= 0.25, showPlot=TRUE, ylim=c(0,0.7))
frqnc$frq
library(simsalRbim)
pkgdown::build_site()
pkgdown::build_site()
library(simsalRbim)
pkgdown::build_site()
library(simsalRbim)
library(simsalRbim)
pkgdown::build_site()
pkgdown::build_site()
