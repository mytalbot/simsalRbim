}else{}
# calculate the intransitivity
if(intrans==TRUE){
I <- bimintrans(dat      = ydata,
idcolumn = "subjectID",
I2       = "optionB",
I1       = "optionA",
response = "result")
}else{}
### Do the model
modData    <- dcast(ydata, formula = subjectID ~ test,
fun.aggregate = sum, value.var = 'result')
modData$subjectID <- NULL
modelY     <- llbt.design(modData,
nitems   = length(optionList) ,
objnames = optionList   )
formula    <- as.formula(paste("y~",
paste( optionList[1:(length(optionList)-1) ] ,
collapse="+")) )
h1Y        <- gnm(formula, data = modelY, family = poisson  )
#NOTE: last entry of optionList is the intercept
# Show the model estimates with 95% CIs in a separate plot
if(showPlot=="coef"){
f <- function(d) {
fit <- do.call("gnm", list(formula, data = d, family = poisson ))
stats::confint(fit)
}
CI <- as.data.frame(f(as.data.frame(modelY)))
rownames(CI)[1] <- simOpt
#hworY           <- llbt.worth(h1Y, outmat ="est")
hworY           <- as.matrix(coef(h1Y))
colnames(hworY) <- "estimate"
row.names(hworY)[1] <- simOpt
new_df          <- cbind(hworY[row.names(CI), ], CI)
colnames(new_df)<- c("estimate","lwr","upr")
new_df$item     <- rownames(new_df)
new_df$item <- factor(new_df$item,
levels = new_df$item[order(new_df$estimate)])
if(verbose==TRUE){
print(new_df)
}else{}
p <- ggplot(new_df, aes(x=item, y=estimate)) +
geom_point(size=2) +
geom_errorbar(aes(ymin=lwr, ymax=upr), width=.1 ) +
# ylim(mYlim) +
labs(title    = "Item comparisons (no simulation)",
subtitle  = "Model coefficients with 95% confidence intervals")   +
ylab("Estimate") +
xlab("") +
labs(colour="Item") +
theme_bw()
p <- p + coord_flip()
print(p)
}else{ }
# print the model summary
if(verbose==TRUE){
print(summary(h1Y))
}else{}
hworY      <- llbt.worth(h1Y, outmat ="worth")
# show plot and adapt the error message
if(showPlot=="worth"){
# plot( hworY, ylim=ylim, ylab="Worth value") # traditional worth plot
# ze own worthplot --------------------------------------------------------
# color function (standard colors)
hcl <- NULL
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
n    = dim(hworY)[1]
cols =  factor(gg_color_hue(n), levels=gg_color_hue(n))
# press into order and attribute colors - otherwise messed up!
df <- data.frame(hworY)
df <- df[order(df$worth, decreasing = TRUE), ,drop=F ]
cbind(df, cols=cols)
# plotting the worth values
p <- ggplot(df, aes(x=rep(1,dim(hworY)[1]), y=worth) ) +
geom_line() +
geom_point(color="black", shape=21, size=size, fill= cols, stroke=1.2  ) +
labs(title     = "Preferences") +
ylab("Worth value") +
xlab("Items")  +
ylim(ylim) +
theme_bw() +
scale_x_discrete(limits = factor(1))
p <- p + theme(legend.position         = "none")
p <- p + geom_label_repel(aes(label     = rownames(df)),
size          = 4,
box.padding   = unit(1.2, "lines"),
point.padding = unit(1.2, "lines"),
show.legend   = FALSE )
p <- p + theme(axis.text.x = element_blank())
p <- p +  theme(axis.line        = element_line(colour = "black"),
strip.background = element_rect(fill = "white", colour = "black", size = 0.8),
strip.text       = element_text(size = 12),
axis.text.x      = element_text(size = 12),
axis.title.x     = element_text(size = 13),
axis.text.y      = element_text(size = 13),
axis.title.y     = element_text(size = 14))
p <- p + theme(axis.text.x = element_blank())
print(p)
if(intrans==TRUE){
return(list(worth=hworY, I=I, p=p))
}else{
return(list(modelY=modData, worth=hworY, p=p))
}
}else{
if(intrans==TRUE){
return(list(modelY=modData,worth=hworY, I=I))
}else{
return(modelY=modData,worth=hworY)
}
}
}
bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = FALSE,
showPlot = "worth",
ylim     = c(0,1))
bimworth <- function(ydata=NULL, GT=NULL, simOpt=NULL,
randOP=FALSE, intrans=FALSE, showPlot=FALSE,
ylim=c(0,0.8), size = 5, verbose=FALSE){
worth <- NULL
# Decision Ratio (a quality estimatation)
#Dratio = sum(ydata$result==1)/sum(ydata$result==-1)
# create the item list
optionList <- c(GT, simOpt)
# Randomize open pairs
if(randOP==TRUE){
nosim   <- ydata[ydata$sim==FALSE, ]
simdat  <- ydata[ydata$sim==TRUE,  ]
simdat$result  <- sample(c(0,1,-1), replace=TRUE, length(simdat$result))
ydata   <- rbind(nosim, simdat)
}else{}
# calculate the intransitivity
if(intrans==TRUE){
I <- bimintrans(dat      = ydata,
idcolumn = "subjectID",
I2       = "optionB",
I1       = "optionA",
response = "result")
}else{}
### Do the model
modData    <- dcast(ydata, formula = subjectID ~ test,
fun.aggregate = sum, value.var = 'result')
modData$subjectID <- NULL
modelY     <- llbt.design(modData,
nitems   = length(optionList) ,
objnames = optionList   )
formula    <- as.formula(paste("y~",
paste( optionList[1:(length(optionList)-1) ] ,
collapse="+")) )
h1Y        <- gnm(formula, data = modelY, family = poisson  )
#NOTE: last entry of optionList is the intercept
# Show the model estimates with 95% CIs in a separate plot
if(showPlot=="coef"){
f <- function(d) {
fit <- do.call("gnm", list(formula, data = d, family = poisson ))
stats::confint(fit)
}
CI <- as.data.frame(f(as.data.frame(modelY)))
rownames(CI)[1] <- simOpt
#hworY           <- llbt.worth(h1Y, outmat ="est")
hworY           <- as.matrix(coef(h1Y))
colnames(hworY) <- "estimate"
row.names(hworY)[1] <- simOpt
new_df          <- cbind(hworY[row.names(CI), ], CI)
colnames(new_df)<- c("estimate","lwr","upr")
new_df$item     <- rownames(new_df)
new_df$item <- factor(new_df$item,
levels = new_df$item[order(new_df$estimate)])
if(verbose==TRUE){
print(new_df)
}else{}
p <- ggplot(new_df, aes(x=item, y=estimate)) +
geom_point(size=2) +
geom_errorbar(aes(ymin=lwr, ymax=upr), width=.1 ) +
# ylim(mYlim) +
labs(title    = "Item comparisons (no simulation)",
subtitle  = "Model coefficients with 95% confidence intervals")   +
ylab("Estimate") +
xlab("") +
labs(colour="Item") +
theme_bw()
p <- p + coord_flip()
print(p)
}else{ }
# print the model summary
if(verbose==TRUE){
print(summary(h1Y))
}else{}
hworY      <- llbt.worth(h1Y, outmat ="worth")
# show plot and adapt the error message
if(showPlot=="worth"){
# plot( hworY, ylim=ylim, ylab="Worth value") # traditional worth plot
# ze own worthplot --------------------------------------------------------
# color function (standard colors)
hcl <- NULL
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
n    = dim(hworY)[1]
cols =  factor(gg_color_hue(n), levels=gg_color_hue(n))
# press into order and attribute colors - otherwise messed up!
df <- data.frame(hworY)
df <- df[order(df$worth, decreasing = TRUE), ,drop=F ]
cbind(df, cols=cols)
# plotting the worth values
p <- ggplot(df, aes(x=rep(1,dim(hworY)[1]), y=worth) ) +
geom_line() +
geom_point(color="black", shape=21, size=size, fill= cols, stroke=1.2  ) +
labs(title     = "Preferences") +
ylab("Worth value") +
xlab("Items")  +
ylim(ylim) +
theme_bw() +
scale_x_discrete(limits = factor(1))
p <- p + theme(legend.position         = "none")
p <- p + geom_label_repel(aes(label     = rownames(df)),
size          = 4,
box.padding   = unit(1.2, "lines"),
point.padding = unit(1.2, "lines"),
show.legend   = FALSE )
p <- p + theme(axis.text.x = element_blank())
p <- p +  theme(axis.line        = element_line(colour = "black"),
strip.background = element_rect(fill = "white", colour = "black", size = 0.8),
strip.text       = element_text(size = 12),
axis.text.x      = element_text(size = 12),
axis.title.x     = element_text(size = 13),
axis.text.y      = element_text(size = 13),
axis.title.y     = element_text(size = 14))
p <- p + theme(axis.text.x = element_blank())
print(p)
if(intrans==TRUE){
return(list(modData=modData,worth=hworY, I=I, p=p))
}else{
return(list(modData=modData, worth=hworY, p=p))
}
}else{
if(intrans==TRUE){
return(list(modData=modData,worth=hworY, I=I))
}else{
return(modData=modData,worth=hworY)
}
}
}
bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = FALSE,
showPlot = "worth",
ylim     = c(0,1))
library(simsalRbim)
library(ggrepel)
library(prefmod)
library(reshape2)
# Data: Large Valence Table for Paper -------------------------------------
large_lab <- bimload ("C:/MHH Bleich/Packages/simsalRbim/testfolder/online_vs_real_valence/data/humanlargevalence_lab.txt")
large_web <- bimload ("C:/MHH Bleich/Packages/simsalRbim/testfolder/online_vs_real_valence/data/humanlargevalence_web.txt")
simOpt     <- "Lake"
GT         <- c("Frustrated","Crow","War","Cat","Doctor", "Fire" )
#large_lab <- bimload ("C:/MHH Bleich/Packages/simsalRbim/testfolder/online_vs_real_valence/data/humanlowvalence_lab.txt")
#large_web <- bimload ("C:/MHH Bleich/Packages/simsalRbim/testfolder/online_vs_real_valence/data/humanlowvalence_web.txt")
#simOpt     <- "Sunset"
#GT         <- c("Grass","House","Food","Monkey","Timber" )
# preprocess
prepro <- function(data=NULL, simOpt=NULL, GT=NULL){
predat     <- bimpre (dat=data, GT=GT, simOpt=simOpt, deviation  = 0 )
modData    <- dcast(predat, formula = subjectID ~ test,
fun.aggregate = sum, value.var = 'result')
modData$subjectID <- NULL
optionList <- c(GT, simOpt)
modelY     <- llbt.design(modData,
nitems   = length(optionList) ,
objnames = optionList   )
formula    <- as.formula(paste("y~",
paste( optionList[1:(length(optionList)-1) ] ,
collapse="+")) )
h1Y        <- gnm(formula, data = modelY, family = poisson  )
hworY      <- llbt.worth(h1Y, outmat ="worth")
return(list(h1Y=h1Y, hworY=hworY))
}
lab <- prepro(data=large_lab, simOpt="Lake", GT=c("Frustrated","Crow","War","Cat","Doctor", "Fire" ))
web <- prepro(data=large_web, simOpt="Lake", GT=c("Frustrated","Crow","War","Cat","Doctor", "Fire" ))
# lab <- prepro(data=large_lab, simOpt="Sunset", GT=c("Grass","House","Food","Monkey","Timber" ))
# web <- prepro(data=large_web, simOpt="Sunset", GT=c("Grass","House","Food","Monkey","Timber" ))
#Merge them together
w   <- merge(lab$hworY, web$hworY, by = "row.names", all = TRUE)
names(w) <- c("Zeuch","lab","web")
df  <- melt(w, id.vars="Zeuch")
# model comparisons
anova(lab$h1Y, web$h1Y)
res <- anova(lab$h1Y, web$h1Y, test="Chisq")
res
# prozentualer Anteil an Deviances
23.359 / ((61.383+59.915)/2)*100
9.7993 / ((20.333+10.534)/2)*100
# Deviance is calculated as the difference of log likelihoods between the
# fitted model and the saturated model
# Is not the percentage of variance explained by the model, but rather a ratio
# indicating how close is the fit to being perfect or the worst.
1-pchisq( abs(res$Deviance[2]), abs(res$Df[2])) # cannot be calculated df=0
1-pchisq( abs(res$Deviance[2]), 1)
# coloring
# color function (standard colors)
hcl <- NULL
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
n      = dim(lab$hworY)[1]
mycols = c(gg_color_hue(n),gg_color_hue(n))
cols   =  factor(mycols, levels=gg_color_hue(n))
### Plot the two comparisons
p <- ggplot(df, aes(x=variable, y=value, group=variable) ) +
geom_line() +
geom_point(color="black", shape=21, size=3, stroke=1.2, fill= cols  ) +
labs(title     = "Preferences") +
ylab("Worth value") +
xlab("Items")  +
ylim(0,0.5) +
theme_bw()
p <- p + theme(legend.position         = "none")
p <- p + geom_label_repel(aes(label     = Zeuch),
size          = 4,
box.padding   = unit(1.2, "lines"),
point.padding = unit(1.2, "lines"),
show.legend   = FALSE )
p <- p +  theme(axis.line        = element_line(colour = "black"),
strip.background = element_rect(fill = "white", colour = "black", size = 0.8),
strip.text       = element_text(size = 12),
axis.text.x      = element_text(size = 12),
axis.title.x     = element_text(size = 13),
axis.text.y      = element_text(size = 13),
axis.title.y     = element_text(size = 14))
print(p)
hworY
ydata    = predat
GT       = GT
simOpt   = simOpt
randOP   = FALSE
showPlot = "worth"
showPlot = "worth"
ylim     = c(0,1)
worth <- NULL
# Decision Ratio (a quality estimatation)
#Dratio = sum(ydata$result==1)/sum(ydata$result==-1)
# create the item list
optionList <- c(GT, simOpt)
# Randomize open pairs
if(randOP==TRUE){
nosim   <- ydata[ydata$sim==FALSE, ]
simdat  <- ydata[ydata$sim==TRUE,  ]
simdat$result  <- sample(c(0,1,-1), replace=TRUE, length(simdat$result))
ydata   <- rbind(nosim, simdat)
}else{}
# calculate the intransitivity
if(intrans==TRUE){
I <- bimintrans(dat      = ydata,
idcolumn = "subjectID",
I2       = "optionB",
I1       = "optionA",
response = "result")
}else{}
intrans=FALSE
worth <- NULL
# Decision Ratio (a quality estimatation)
#Dratio = sum(ydata$result==1)/sum(ydata$result==-1)
# create the item list
optionList <- c(GT, simOpt)
# Randomize open pairs
if(randOP==TRUE){
nosim   <- ydata[ydata$sim==FALSE, ]
simdat  <- ydata[ydata$sim==TRUE,  ]
simdat$result  <- sample(c(0,1,-1), replace=TRUE, length(simdat$result))
ydata   <- rbind(nosim, simdat)
}else{}
# calculate the intransitivity
if(intrans==TRUE){
I <- bimintrans(dat      = ydata,
idcolumn = "subjectID",
I2       = "optionB",
I1       = "optionA",
response = "result")
}else{}
### Do the model
modData    <- dcast(ydata, formula = subjectID ~ test,
fun.aggregate = sum, value.var = 'result')
modData$subjectID <- NULL
modelY     <- llbt.design(modData,
nitems   = length(optionList) ,
objnames = optionList   )
formula    <- as.formula(paste("y~",
paste( optionList[1:(length(optionList)-1) ] ,
collapse="+")) )
h1Y        <- gnm(formula, data = modelY, family = poisson  )
modData    <- dcast(ydata, formula = subjectID ~ test,
fun.aggregate = sum, value.var = 'result')
modData$subjectID <- NULL
modData
modelY     <- llbt.design(modData,
nitems   = length(optionList) ,
objnames = optionList   )
llbt.design(modData,
nitems   = length(optionList) ,
objnames = optionList   )
library(simsalRbim)
library(ggplot2)
# Bubblesize umdrehen in certainty
# tabelle mit allen items simulieren ALLE Combis!
# ROC Analyse
# human, mouse usw. mit 65% durchlaufen lassen
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
simOpt     <- "Zacke"
GT         <- c("Zicke", "Kacke", "Huehner")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation  = 0 )
ydata    = predat
GT       = GT
simOpt   = simOpt
randOP   = FALSE
showPlot = "worth"
ylim     = c(0,1)
worth <- NULL
# Decision Ratio (a quality estimatation)
#Dratio = sum(ydata$result==1)/sum(ydata$result==-1)
# create the item list
optionList <- c(GT, simOpt)
# Randomize open pairs
if(randOP==TRUE){
nosim   <- ydata[ydata$sim==FALSE, ]
simdat  <- ydata[ydata$sim==TRUE,  ]
simdat$result  <- sample(c(0,1,-1), replace=TRUE, length(simdat$result))
ydata   <- rbind(nosim, simdat)
}else{}
# calculate the intransitivity
if(intrans==TRUE){
I <- bimintrans(dat      = ydata,
idcolumn = "subjectID",
I2       = "optionB",
I1       = "optionA",
response = "result")
}else{}
modData    <- dcast(ydata, formula = subjectID ~ test,
fun.aggregate = sum, value.var = 'result')
modData$subjectID <- NULL
modelY     <- llbt.design(modData,
nitems   = length(optionList) ,
objnames = optionList   )
formula    <- as.formula(paste("y~",
paste( optionList[1:(length(optionList)-1) ] ,
collapse="+")) )
h1Y        <- gnm(formula, data = modelY, family = poisson  )
#NOTE: last entry of optionList is the intercept
h1Y
formula
modelY
modData
modData
ydata
ydata
new_df          <- cbind(hworY[row.names(CI), ], CI)
colnames(new_df)<- c("estimate","lwr","upr")
new_df$item     <- rownames(new_df)
f <- function(d) {
fit <- do.call("gnm", list(formula, data = d, family = poisson ))
stats::confint(fit)
}
CI <- as.data.frame(f(as.data.frame(modelY)))
rownames(CI)[1] <- simOpt
# hworY           <- llbt.worth(h1Y, outmat ="est")
hworY           <- as.matrix(coef(h1Y))
colnames(hworY) <- "estimate"
row.names(hworY)[1] <- simOpt
new_df          <- cbind(hworY[row.names(CI), ], CI)
colnames(new_df)<- c("estimate","lwr","upr")
new_df$item     <- rownames(new_df)
new_df$item <- factor(new_df$item,
levels = new_df$item[order(new_df$estimate)])
new_df
hworY
modelY
modData
h1Y
modelY
# hworY           <- llbt.worth(h1Y, outmat ="est")
hworY           <- as.matrix(coef(h1Y))
colnames(hworY) <- "estimate"
row.names(hworY)[1] <- simOpt
new_df          <- cbind(hworY[row.names(CI), ], CI)
colnames(new_df)<- c("estimate","lwr","upr")
new_df$item     <- rownames(new_df)
new_df$item <- factor(new_df$item,
levels = new_df$item[order(new_df$estimate)])
hworY
p <- ggplot(new_df, aes(x=item, y=estimate)) +
geom_point(size=2) +
geom_errorbar(aes(ymin=lwr, ymax=upr), width=.1 ) +
# ylim(mYlim) +
labs(title    = "Item comparisons (no simulation)",
subtitle  = "Model coefficients with 95% confidence intervals")   +
ylab("Estimate") +
xlab("") +
labs(colour="Item") +
theme_bw()
p <- p + coord_flip()
print(p)
hworY      <- llbt.worth(h1Y, outmat ="worth")
hworY
h1Y
