}
# arrange all
d <- w_errors %>%
arrange(desc(worth)) %>%
mutate(pos = 1:n()) %>%
as.data.frame()
D <- rbind(D, data.frame(run        = i, d) )
}
reps
i
i
predat     <- bimpre (dat=rawdat, GT=GT, simOpt=simOpt, deviation=deviation,
minQuantity=minQuantity, verbose=FALSE)
# Randomize open pairs
nosim   <- predat[predat$sim==FALSE, ]
simdat  <- predat[predat$sim==TRUE,  ]
simdat$result  <- sample(c(1,-1), replace=TRUE, length(simdat$result)) # keine NULLEN!
ydata          <- rbind(nosim, simdat)
#print(paste("Simulated items: ", length(simdat$result),sep="" ))
#print(simdat)
worth      <- bimworth(ydata    = ydata,
GT       = GT,
simOpt   = simOpt,
randOP   = FALSE,
intrans  = ifelse(filter.crit=="CE",FALSE,TRUE))
# adapt to worth matrix change when CE is used
if(filter.crit=="CE"){
options(warn=-1)
w_errors   <- bimeval(ydata     = ydata,
worth     = worth,
GT        = GT,
simOpt    = simOpt,
filtersim = FALSE)
options(warn=0)
# add the intransitivity ratio
w_errors$Iratio <- NULL
w_errors$Iratio <- NA
}else{
options(warn=-1)
w_errors   <- bimeval(ydata     = ydata,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
filtersim = FALSE)
options(warn=0)
# add the intransitivity ratio
w_errors$Iratio <- NULL
w_errors$Iratio <- worth$I$Iratio
w_errors
for(i in 1:reps){
predat     <- bimpre (dat=rawdat, GT=GT, simOpt=simOpt, deviation=deviation,
minQuantity=minQuantity, verbose=FALSE)
# Randomize open pairs
nosim   <- predat[predat$sim==FALSE, ]
simdat  <- predat[predat$sim==TRUE,  ]
simdat$result  <- sample(c(1,-1), replace=TRUE, length(simdat$result)) # keine NULLEN!
ydata          <- rbind(nosim, simdat)
#print(paste("Simulated items: ", length(simdat$result),sep="" ))
#print(simdat)
worth      <- bimworth(ydata    = ydata,
GT       = GT,
simOpt   = simOpt,
randOP   = FALSE,
intrans  = ifelse(filter.crit=="CE",FALSE,TRUE))
# adapt to worth matrix change when CE is used
if(filter.crit=="CE"){
options(warn=-1)
w_errors   <- bimeval(ydata     = ydata,
worth     = worth,
GT        = GT,
simOpt    = simOpt,
filtersim = FALSE)
options(warn=0)
# add the intransitivity ratio
w_errors$Iratio <- NULL
w_errors$Iratio <- NA
}else{
options(warn=-1)
w_errors   <- bimeval(ydata     = ydata,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
filtersim = FALSE)
options(warn=0)
# add the intransitivity ratio
w_errors$Iratio <- NULL
w_errors$Iratio <- worth$I$Iratio
}
# arrange all
d <- w_errors$errors %>%
arrange(desc(worth)) %>%
mutate(pos = 1:n()) %>%
as.data.frame()
D <- rbind(D, data.frame(run        = i, d) )
}
library(simsalRbim)
# ZickeZacke w/ HoiHoiHoi item  -------------------------------------------
library(simsalRbim)
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c("Zicke","Zacke","Huehner", "Kacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE ,
subtitle  = NULL,
ylim      = c(0,1))
w_errors
p <- w_errors$p
p <- p + theme(plot.title        = element_text(hjust = 0.5))
p <- p +  theme(legend.position  = "bottom", legend.justification = c("left"))
p <- p+ labs(title = "Very important title") +
theme(plot.title = element_text(hjust = 0.5) )
p <- p + annotate("text", x = 0.6, y = 0.44, size=4.5,
label = paste("Mean CE=",round(mean(w_errors$errors$CE),2),"% ",sep=""))
# p <- p + scale_size_continuous(name = "Consensus error (%)",
#                             breaks  = c(0,5,15,20),
#                             limits  = c(0, 20),
#                             range   = c(0, 2) )
p
# uninformed simulation  - cutoff determination
cutoff     <- bimUninformed(ydat       = predat,
GT         = GT,
simOpt     = simOpt,
limitToRun = 50,
ylim       = c(-1,2) )
cutoff$cutoff
# uninformed simulation  - Use the cutoff in the item positioning
pos        <- bimpos(ydata=predat, GT=GT, simOpt=simOpt, limitToRun=cutoff$cutoff, showPlot=TRUE )
pos$simerrors
frqnc      <- bimsim(rawdat      = dat,
GT          = GT,
simOpt      = simOpt,
limitToRun  = 10,
tcut        = 0.90,
filter.crit ="Iratio",
ylim        = c(0,0.6))
frqnc$frq
bimsim(rawdat      = dat,
GT          = GT,
simOpt      = simOpt,
limitToRun  = 10,
tcut        = 0.90,
filter.crit ="Iratio",
ylim        = c(0,0.6))
dat
rawdat      = dat
GT          = GT
simOpt      = simOpt
limitToRun  = 10
tcut        = 0.90
filter.crit ="Iratio"
ylim        = c(0,0.6)
# Helperfunction
printf <- function(...) cat(sprintf(...))
# use seeding?
if(seed==TRUE){
set.seed(123)
}else{}
# do the simulation
reps    <- limitToRun
deviate <- 0
W       <- NULL
D       <- NULL
D       <- pos <- CE <- NULL
for(i in 1:reps){
predat     <- bimpre (dat=rawdat, GT=GT, simOpt=simOpt, deviation=deviation,
minQuantity=minQuantity, verbose=FALSE)
# Randomize open pairs
nosim   <- predat[predat$sim==FALSE, ]
simdat  <- predat[predat$sim==TRUE,  ]
simdat$result  <- sample(c(1,-1), replace=TRUE, length(simdat$result)) # keine NULLEN!
ydata          <- rbind(nosim, simdat)
#print(paste("Simulated items: ", length(simdat$result),sep="" ))
#print(simdat)
worth      <- bimworth(ydata    = ydata,
GT       = GT,
simOpt   = simOpt,
randOP   = FALSE,
intrans  = ifelse(filter.crit=="CE",FALSE,TRUE))
# adapt to worth matrix change when CE is used
if(filter.crit=="CE"){
options(warn=-1)
w_errors   <- bimeval(ydata     = ydata,
worth     = worth,
GT        = GT,
simOpt    = simOpt,
filtersim = FALSE)
options(warn=0)
# add the intransitivity ratio
w_errors$Iratio <- NULL
w_errors$Iratio <- NA
}else{
options(warn=-1)
w_errors   <- bimeval(ydata     = ydata,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
filtersim = FALSE)
options(warn=0)
# add the intransitivity ratio
w_errors$Iratio <- NULL
w_errors$Iratio <- worth$I$Iratio
}
# arrange all
d <- w_errors$err %>%
arrange(desc(worth)) %>%
mutate(pos = 1:n()) %>%
as.data.frame()
D <- rbind(D, data.frame(run        = i, d) )
}
# add to X-scale for better optics
L    <- length(GT) + 1
# adapt the CE scale
D$CE <- D$CE / 100
# adapt the legend label
if (filter.crit == "CE") {
legend.label  = "Consensus Error (CE)"
# plot CR
p  <- D %>%
filter(item %in% simOpt) %>%
filter(get(filter.crit)  <= tcut) %>%
ggplot(aes(x=factor(pos), y=worth)) +
geom_jitter( aes(size =  get(filter.crit), fill=get(filter.crit) ),
shape = 21, alpha = 0.7, width=0.2) +
ylim(ylim) +
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(0, L+1  )) + # adjust this
xlab("Position") +
ylab("Mean Worth Value")   +
labs(title    = "Informed position simulation",
subtitle = paste("Item: ", simOpt, " at ", limitToRun,
" randomizations (", filter.crit," cutoff=",
tcut*100,"%).", sep="")) +
theme_bw() +
theme(axis.title.x = element_text(hjust= 0.5)) +
theme(axis.title.y = element_text(hjust= 0.5)) +
scale_x_discrete(limits = factor(1:L ))
p <- p +  theme(legend.position  = "top")
p <- p + labs(fill = legend.label, size=legend.label)
} else if (filter.crit == "Iratio") {
legend.label  = "Transitivity Ratio (1-Iratio)"
# plot IRatio
D <- D %>%
mutate(D, trRatio= round(1-Iratio,4))
p  <- D %>%
filter(item %in% simOpt) %>%
filter(trRatio  >= tcut) %>%
ggplot(aes(x=factor(pos), y=worth)) +
geom_jitter( aes(size = trRatio, fill=trRatio ),
shape = 21, alpha = 0.7, width=0.2) +
ylim(ylim) +
scale_fill_viridis_c(guide = "legend" ) +
scale_size_continuous(range = c(1, L +1 )) + # adjust this
xlab("Position") +
ylab("Mean Worth Value")   +
labs(title    = "Informed position simulation",
subtitle = paste("Item: ", simOpt, " at ", limitToRun,
" randomizations (1-", filter.crit," cutoff=",
round(tcut*100,4),"%).", sep="")) +
theme_bw() +
theme(axis.title.x = element_text(hjust= 0.5)) +
theme(axis.title.y = element_text(hjust= 0.5)) +
scale_x_discrete(limits = factor(1:L ))
p <- p +  theme(legend.position  = "top")
p <- p + labs(fill = legend.label, size=legend.label)
}
D
filter.crit
worth$I$Iratio
w_errors
w_errors
library(simsalRbim)
library(simsalRbim)
library(ggplot2)
# ZickeZacke w/ HoiHoiHoi item  -------------------------------------------
library(simsalRbim)
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c("Zicke","Zacke","Huehner", "Kacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE ,
subtitle  = NULL,
ylim      = c(0,1))
w_errors
p <- w_errors$p
p <- p + theme(plot.title        = element_text(hjust = 0.5))
p <- p +  theme(legend.position  = "bottom", legend.justification = c("left"))
p <- p+ labs(title = "Very important title") +
theme(plot.title = element_text(hjust = 0.5) )
p <- p + annotate("text", x = 0.6, y = 0.44, size=4.5,
label = paste("Mean CE=",round(mean(w_errors$errors$CE),2),"% ",sep=""))
# p <- p + scale_size_continuous(name = "Consensus error (%)",
#                             breaks  = c(0,5,15,20),
#                             limits  = c(0, 20),
#                             range   = c(0, 2) )
p
# uninformed simulation  - cutoff determination
cutoff     <- bimUninformed(ydat       = predat,
GT         = GT,
simOpt     = simOpt,
limitToRun = 50,
ylim       = c(-1,2) )
cutoff$cutoff
# uninformed simulation  - Use the cutoff in the item positioning
pos        <- bimpos(ydata=predat, GT=GT, simOpt=simOpt, limitToRun=cutoff$cutoff, showPlot=TRUE )
pos$simerrors
bimsim(rawdat      = dat,
GT          = GT,
simOpt      = simOpt,
limitToRun  = 10,
tcut        = 0.90,
filter.crit ="Iratio",
ylim        = c(0,0.6))
bimsim(rawdat      = dat,
GT          = GT,
simOpt      = simOpt,
limitToRun  = 50,
tcut        = 0.90,
filter.crit ="Iratio",
ylim        = c(0,0.6))
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c("Zicke","Zacke","Huehner", "Kacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt)
randOP     <- TRUE
optionList <- c(GT, simOpt)
ydata      <- predat
# Randomize open pairs
if(randOP==TRUE){
nosim   <- ydata[ydata$sim==FALSE, ]
simdat  <- ydata[ydata$sim==TRUE,  ]
simdat$result  <- sample(c(0,1,-1), replace=TRUE, length(simdat$result))
ydata   <- rbind(nosim, simdat)
}else{}
I <- bimintrans(dat      = ydata,
idcolumn = "subjectID",
I2       = "optionB",
I1       = "optionA",
response = "result")
I
frqnc$frq
predat
BB              <- predat[grepl(simOpt,predat$test, fixed = TRUE),  ]
provided        <- length(unique(BB$subjectID [BB$sim == FALSE   ]))
simulated       <- length( unique(BB$subjectID[BB$sim != FALSE   ]) )
subjratio       <- provided/ (simulated )
subjratio
II              <- predat[grepl(simOpt, predat$test, fixed = TRUE),]
items_provided  <- length(unique(II$test [II$sim == FALSE   ]))
items_simulated <- length(unique(II$test [II$sim != FALSE   ]))
itemratio       <- items_provided/(items_simulated)
itemratio
library(simsalRbim)
bimbalance(predat)
ZickeZacke
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
library(simsalRbim)
pkgdown::build_site()
208122 - 203605
4517 /40*100
4517 /100 *40
4517/100*50
4517/100*10
1806.8+2258.5+451.7
library(simsalRbim)
library(ggplot2)
# Bubblesize umdrehen in certainty
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
simOpt     <- "Zacke"
GT         <- c("Zicke", "Kacke", "Huehner")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt )
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = FALSE,
showPlot = "worth",
ylim     = c(0,0.8))
# Human Large Valence (Spring School) -------------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
simOpt     <- "Lake"
GT         <- c("Frustrated","Crow","War","Cat","Doctor", "Fire")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
showPlot = "worth")
worth
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE,
ylim      = c(0, 0.45))
w_errors
p <- w_errors$p
p <- p + theme(plot.title        = element_text(hjust = 0.5))
p <- p +  theme(legend.position  = "bottom", legend.justification = c("left"))
p <- p+ labs(title = "Very important title") +
theme(plot.title = element_text(hjust = 0.5) )
p <- p + annotate("text", x = 0.6, y = 0.44, size=4.5,
label = paste("Mean CE=",round(mean(w_errors$errors$CE),2),"% ",sep=""))
p
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
simOpt     <- "Zacke"
GT         <- c("Zicke", "Kacke", "Huehner")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt )
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = FALSE,
showPlot = "worth",
ylim     = c(0,0.8))
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE,
ylim      = c(0,1))
# remember: we want mean_delta to be high (close to 50%)
w_errors
### Wishlist umsetzen
p <- w_errors$p
p <- p + theme(plot.title        = element_text(hjust = 0.5))
p <- p +  theme(legend.position  = "bottom", legend.justification = c("left"))
p <- p+ labs(title = "Very important title") +
theme(plot.title = element_text(hjust = 0.5) )
p <- p + annotate("text", x = 0.6, y = 0.44, size=4.5,
label = paste("Mean CE=",round(mean(w_errors$errors$CE),2),"% ",sep=""))
p
# Maus - Mice_oneLineTest1_20201102DP -------------------------------------
dat        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_oneLineTest1_20201102DP.txt")
bimbalance(dat)
simOpt     <- "water"
GT         <- c("HCl","m5MSac",  "m10MSac", "NaCl"   )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE ,
showPlot = "worth")
worth
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE,
ylim      = c(0, 0.45))
w_errors
# Monkey ------------------------------------------------------------------
# Note: Banana and Grape are equal when deviation = 0. Change deviation to 10! ;-)
dat        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Rhesus_oneLine_20201116DP.txt")
bimbalance(dat)
simOpt     <- "water"
GT         <- c("banana", "grape", "NaCl", "quinine")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0 )
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE ,
showPlot = "worth")
worth
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE)
w_errors
# Maus - Mice_oneLineTest1_20201102DP -------------------------------------
dat        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_oneLineTest1_20201102DP.txt")
bimbalance(dat)
simOpt     <- "water"
GT         <- c("HCl","m5MSac",  "m10MSac", "NaCl"   )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE ,
showPlot = "worth")
worth
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE,
ylim      = c(0, 0.45))
w_errors
