dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
# dat <- dat[dat$subjectID=="eins", ]
simOpt     <- "Zicke"
GT         <- c("Zacke", "Huehner", "Kacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
showPlot = "est")
worth
library(simsalRbim)
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
# dat <- dat[dat$subjectID=="eins", ]
simOpt     <- "Zicke"
GT         <- c("Zacke", "Huehner", "Kacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
showPlot = "est")
worth
library(simsalRbim)
library(simsalRbim)
# Introduction of a new item with restricted measurements -----------------
# Import from a fresh file w/ Coke items
# and 1 Tie
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c( "Huehner", "Kacke",  "Zicke","Zacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "coef")
worth
library(simsalRbim)
cutoff     <- bimUninformed(ydata=predat, GT=GT, simOpt=simOpt, limitToRun=100, ylim=c(-1,2) )
cutoff$cutoff
pos        <- bimpos(ydata=predat, GT=GT, simOpt=simOpt, limitToRun=78, showPlot=TRUE )
pos$simerrors
frqnc      <- bimsim(ydata = predat, GT=GT, simOpt=simOpt, limitToRun=78, fval= 1, showPlot=TRUE, ylim=c(0,0.7))
frqnc$frq
library(simsalRbim)
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
# dat <- dat[dat$subjectID=="eins", ]
simOpt     <- "Zicke"
GT         <- c("Zacke", "Huehner", "Kacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
showPlot = "coef")
worth
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
# dat <- dat[dat$subjectID=="eins", ]
simOpt     <- "Zicke"
GT         <- c("Zacke", "Huehner", "Kacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
showPlot = "worth")
worth
simOpt     <- "Zicke"
GT         <- c("Zacke", "Huehner", "Kacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
showPlot = "coef")
worth
worth
library(simsalRbim)
library(simsalRbim)
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
# dat <- dat[dat$subjectID=="eins", ]
simOpt     <- "Zicke"
GT         <- c("Zacke", "Huehner", "Kacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
showPlot = "coef")
worth
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
verbose  = TRUE,
showPlot = "coef")
worth
simOpt     <- "Zicke"
GT         <- c("Zacke", "Huehner", "Kacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
verbose  = TRUE,
showPlot = "worth")
worth
simOpt     <- "Zicke"
GT         <- c("Zacke", "Huehner", "Kacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
verbose  = TRUE,
showPlot = "worth")
worth
library(simsalRbim)
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
dat
predat
predat[predat$subjectID=="eins", ]
dat[dat$subjectID=="eins", ]
predat[predat$subjectID=="eins", ]
predat[predat$optionA =="Zicke", ]
predat[predat$optionA =="Zacke", ]
predat[predat$optionA =="Zacke", "result"  ]
predat[predat$optionA =="Zacke", "result"  ]==1
sum(predat[predat$optionA =="Zacke", "result"  ]==1)
unique(predat$subjectID)
sum(predat[predat$optionA =="Zacke", "result"  ]==1) / unique(predat$subjectID)
unique(predat$subjectID)
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
# dat <- dat[dat$subjectID=="eins", ]
simOpt     <- "Zicke"
GT         <- c("Zacke", "Huehner", "Kacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
verbose  = TRUE,
showPlot = "coef")
worth
# and 1 Tie
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c( "Huehner", "Kacke",  "Zicke","Zacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "coef")
worth
library(simsalRbim)
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
# dat <- dat[dat$subjectID=="eins", ]
simOpt     <- "Zicke"
GT         <- c("Zacke", "Huehner", "Kacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
verbose  = TRUE,
showPlot = "coef")
worth
predat
predat[predat$test==unique(predat$test)[1], ]
sum(predat[predat$test==unique(predat$test)[1], ]$result)
sum(predat[predat$test==unique(predat$test)[1], ]$result) / length(unique(predat$subjectID)
)
sum(predat[predat$test==unique(predat$test)[1], ]$result) / length(unique(predat$subjectID))*100
predat[predat$test==unique(predat$test)[1], ]$result
predat[predat$test==unique(predat$test)[1], "test"]
unique(predat[predat$test==unique(predat$test)[1], "test"])
as.character(unique(predat[predat$test==unique(predat$test)[1], "test"]))
data.frame(test = as.character(unique(predat[predat$test==unique(predat$test)[1], "test"])),
frqc = sum(predat[predat$test==unique(predat$test)[1], ]$result) / length(unique(predat$subjectID))*100)
TT <- NULL
for(i in 1:length(unique(predat$test))){
tt <- data.frame(test = as.character(unique(predat[predat$test==unique(predat$test)[i], "test"])),
frqc = sum(predat[predat$test==unique(predat$test)[i], ]$result) / length(unique(predat$subjectID))*100)
TT <- rbind(TT, tt)
}
TT
# Introduction of a new item with restricted measurements -----------------
# Import from a fresh file w/ Coke items
# and 1 Tie
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c( "Huehner", "Kacke",  "Zicke","Zacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "coef")
worth
TT <- NULL
for(i in 1:length(unique(predat$test))){
tt <- data.frame(test = as.character(unique(predat[predat$test==unique(predat$test)[i], "test"])),
frqc = sum(predat[predat$test==unique(predat$test)[i], ]$result) / length(unique(predat$subjectID))*100)
TT <- rbind(TT, tt)
}
TT
sum(predat[predat$test==unique(predat$test)[i], ]$result)
predat[predat$test==unique(predat$test)[i], ]
sum(predat[predat$test==unique(predat$test)[i], ]$result)
predat[predat$test==unique(predat$test)[i], ]$result
TT <- NULL
for(i in 1:length(unique(predat$test))){
tt <- data.frame(test = as.character(unique(predat[predat$test==unique(predat$test)[i], "test"])),
frqc = sum(predat[predat$test==unique(predat$test)[i], ]$result==-1) / length(unique(predat$subjectID))*100)
TT <- rbind(TT, tt)
}
TT
TT <- NULL
for(i in 1:length(unique(predat$test))){
tt <- data.frame(test   = as.character(unique(predat[predat$test==unique(predat$test)[i], "test"])),
frqc_firstItem = sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100)
TT <- rbind(TT, tt)
}
TT
TT <- NULL
for(i in 1:length(unique(predat$test))){
tt <- data.frame(test   = as.character(unique(predat[predat$test==unique(predat$test)[i], "test"])),
pct_first      = sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100,
pct_second     = 100- pct_first)
TT <- rbind(TT, tt)
}
TT <- NULL
for(i in 1:length(unique(predat$test))){
tt <- data.frame(test   = as.character(unique(predat[predat$test==unique(predat$test)[i], "test"])),
pct_first      = sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100,
pct_second     = (100)sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100) - pct_first)
TT <- rbind(TT, tt)
}
TT <- NULL
for(i in 1:length(unique(predat$test))){
tt <- data.frame(test   = as.character(unique(predat[predat$test==unique(predat$test)[i], "test"])),
pct_first      = sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100,
pct_second     = sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100) - pct_first)
TT <- rbind(TT, tt)
}
sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100)
sum(predat[predat$test==unique(predat$test)[i], ]$result== 1)
TT <- NULL
for(i in 1:length(unique(predat$test))){
tt <- data.frame(test   = as.character(unique(predat[predat$test==unique(predat$test)[i], "test"])),
pct_first      = sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100,
pct_second     = (sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100) - pct_first)
TT <- rbind(TT, tt)
}
TT <- NULL
for(i in 1:length(unique(predat$test))){
tt <- data.frame(test   = as.character(unique(predat[predat$test==unique(predat$test)[i], "test"])),
pct_first      = sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100,
pct_second     = 100 - (sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100))
TT <- rbind(TT, tt)
}
TT
library(simsalRbim)
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
# dat <- dat[dat$subjectID=="eins", ]
simOpt     <- "Zicke"
GT         <- c("Zacke", "Huehner", "Kacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
verbose  = TRUE,
showPlot = "coef")
worth
# Gütewert für nicht simulierte Daten.
# Worthplot für einzelne Personen und ob die sich einig sind?
# Auszählen
# wie viele Leute von insgesamt fanden X besser?
# jeweils für simulation und nicht simulation machen!
TT <- NULL
for(i in 1:length(unique(predat$test))){
tt <- data.frame(test   = as.character(unique(predat[predat$test==unique(predat$test)[i], "test"])),
pct_first      = sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100,
pct_second     = 100 - (sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100))
TT <- rbind(TT, tt)
}
TT
library(simsalRbim)
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
# dat <- dat[dat$subjectID=="eins", ]
simOpt     <- "Zicke"
GT         <- c("Zacke", "Huehner", "Kacke" )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
verbose  = TRUE,
showPlot = "worth")
worth
# Gütewert für nicht simulierte Daten.
# Worthplot für einzelne Personen und ob die sich einig sind?
# Auszählen
# wie viele Leute von insgesamt fanden X besser?
# jeweils für simulation und nicht simulation machen!
TT <- NULL
for(i in 1:length(unique(predat$test))){
tt <- data.frame(test   = as.character(unique(predat[predat$test==unique(predat$test)[i], "test"])),
pct_first      = sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100,
pct_second     = 100 - (sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100))
TT <- rbind(TT, tt)
}
TT
optionlist <- c(simOpt, GT)
weights    <- NULL
for(j in 1:length(optionlist)){
item  <- TT[grepl(optionlist[j], TT$test, fixed = TRUE),]
liste <- NULL
for(i in 1:dim(item)[1]){
if( item[i, "pct_first" ] > item[i, "pct_second" ]  ){
delta  <- (50 - item[i, "pct_second" ])
}else{
delta <- (50 - item[i, "pct_first" ])
}
liste    <- rbind(liste, data.frame(item =optionlist[j], delta = delta))
}
mean_delta <- mean(liste$delta, na.rm = TRUE)
sd_delta   <- sd  (liste$delta, na.rm = TRUE)
n_delta    <- length(liste$delta)
lwr        <- mean_delta - qt(0.975,df=length(liste$delta)-1)*sd  (liste$delta, na.rm = TRUE)/sqrt(length(liste$delta))
upr        <- mean_delta + qt(0.975,df=length(liste$delta)-1)*sd  (liste$delta, na.rm = TRUE)/sqrt(length(liste$delta))
weights    <- rbind(weights, data.frame(item    = optionlist[j],
mean_delta = mean_delta,
sd_delta   = sd_delta,
n          = n_delta,
lwr        = lwr,
upr        = upr ))
}
weights.sorted <- weights[order(rownames(weights)),]
W              <- cbind(weights.sorted ,
worth = worth$worth[match(weights.sorted$item, rownames(worth$worth)),])
W$uncert       <- round((50-W$mean_delta)/50*100,2)
W$label        <- paste(W$item," ", round((50-W$mean_delta)/50*100,2), "%",sep="")
round(mean(W$uncert),2)
library(viridis)
library(ggrepel)
cols <- viridis_pal(option = "D")(length(W$item))
p <- ggplot(W, aes(x=rep(1,dim(W)[1]), y=worth) ) +
geom_point( aes(size = (50-mean_delta)/50*100), color="black", shape=21, fill=cols ) +
geom_line() +
labs(title     = "Consensus Analysis",
subtitle  = "Bubble sizes indicate uncertainty in item choice",
size      = "Consensus error (%)") +
ylab("Mean Worth Value") +
xlab("worth")  +
theme_bw() +
scale_x_discrete(limits = factor(1 ))
#p <- p + scale_size(range = c(0, 10))
p <- p +  theme(legend.position         = "top")
p <- p + geom_label_repel(aes(label     = label),
size          = 4,
box.padding   = unit(0.6, "lines"),
point.padding = unit(0.6, "lines"),
show.legend   = FALSE )
p
# Human data 1 --------------------------------------------------------------
dat        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
simOpt     <- "Lake"
GT         <- c("Frustrated","Crow","War","Cat","Doctor", "Fire")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
showPlot = "est")
worth
TT <- NULL
for(i in 1:length(unique(predat$test))){
tt <- data.frame(test   = as.character(unique(predat[predat$test==unique(predat$test)[i], "test"])),
pct_first      = sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100,
pct_second     = 100 - (sum(predat[predat$test==unique(predat$test)[i], ]$result== 1) / length(unique(predat$subjectID))*100))
TT <- rbind(TT, tt)
}
TT
optionlist <- c(simOpt, GT)
weights    <- NULL
for(j in 1:length(optionlist)){
item  <- TT[grepl(optionlist[j], TT$test, fixed = TRUE),]
liste <- NULL
for(i in 1:dim(item)[1]){
if( item[i, "pct_first" ] > item[i, "pct_second" ]  ){
delta  <- (50 - item[i, "pct_second" ])
}else{
delta <- (50 - item[i, "pct_first" ])
}
liste    <- rbind(liste, data.frame(item =optionlist[j], delta = delta))
}
mean_delta <- mean(liste$delta, na.rm = TRUE)
sd_delta   <- sd  (liste$delta, na.rm = TRUE)
n_delta    <- length(liste$delta)
lwr        <- mean_delta - qt(0.975,df=length(liste$delta)-1)*sd  (liste$delta, na.rm = TRUE)/sqrt(length(liste$delta))
upr        <- mean_delta + qt(0.975,df=length(liste$delta)-1)*sd  (liste$delta, na.rm = TRUE)/sqrt(length(liste$delta))
weights    <- rbind(weights, data.frame(item    = optionlist[j],
mean_delta = mean_delta,
sd_delta   = sd_delta,
n          = n_delta,
lwr        = lwr,
upr        = upr ))
}
weights.sorted <- weights[order(rownames(weights)),]
W              <- cbind(weights.sorted ,
worth = worth$worth[match(weights.sorted$item, rownames(worth$worth)),])
W
weights
liste
TT
optionlist <- c(simOpt, GT)
weights    <- NULL
for(j in 1:length(optionlist)){
item  <- TT[grepl(optionlist[j], TT$test, fixed = TRUE),]
liste <- NULL
for(i in 1:dim(item)[1]){
if( item[i, "pct_first" ] > item[i, "pct_second" ]  ){
delta  <- (50 - item[i, "pct_second" ])
}else{
delta <- (50 - item[i, "pct_first" ])
}
liste    <- rbind(liste, data.frame(item =optionlist[j], delta = delta))
}
mean_delta <- mean(liste$delta, na.rm = TRUE)
sd_delta   <- sd  (liste$delta, na.rm = TRUE)
n_delta    <- length(liste$delta)
lwr        <- mean_delta - qt(0.975,df=length(liste$delta)-1)*sd  (liste$delta, na.rm = TRUE)/sqrt(length(liste$delta))
upr        <- mean_delta + qt(0.975,df=length(liste$delta)-1)*sd  (liste$delta, na.rm = TRUE)/sqrt(length(liste$delta))
weights    <- rbind(weights, data.frame(item    = optionlist[j],
mean_delta = mean_delta,
sd_delta   = sd_delta,
n          = n_delta,
lwr        = lwr,
upr        = upr ))
}
weights
optionlist <- c(simOpt, GT)
weights    <- NULL
for(j in 1:length(optionlist)){
item  <- TT[grepl(optionlist[j], TT$test, fixed = TRUE),]
liste <- NULL
for(i in 1:dim(item)[1]){
if( item[i, "pct_first" ] > item[i, "pct_second" ]  ){
delta  <- (50 - item[i, "pct_second" ])
}else{
delta <- (50 - item[i, "pct_first" ])
}
liste    <- rbind(liste, data.frame(item =optionlist[j], delta = delta))
}
mean_delta <- mean(liste$delta, na.rm = TRUE)
sd_delta   <- sd  (liste$delta, na.rm = TRUE)
n_delta    <- length(liste$delta)
lwr        <- mean_delta - qt(0.975,df=length(liste$delta)-1)*sd  (liste$delta, na.rm = TRUE)/sqrt(length(liste$delta))
upr        <- mean_delta + qt(0.975,df=length(liste$delta)-1)*sd  (liste$delta, na.rm = TRUE)/sqrt(length(liste$delta))
weights    <- rbind(weights, data.frame(item    = optionlist[j],
mean_delta = mean_delta,
sd_delta   = sd_delta,
n          = n_delta,
lwr        = lwr,
upr        = upr ))
}
weights.sorted <- weights[order(rownames(weights)),]
W              <- cbind(weights.sorted ,
worth = worth$worth[match(weights.sorted$item, rownames(worth$worth)),])
W$uncert       <- round((50-W$mean_delta)/50*100,2)
W$label        <- paste(W$item," ", round((50-W$mean_delta)/50*100,2), "%",sep="")
round(mean(W$uncert),2)
library(viridis)
library(ggrepel)
cols <- viridis_pal(option = "D")(length(W$item))
p <- ggplot(W, aes(x=rep(1,dim(W)[1]), y=worth) ) +
geom_point( aes(size = (50-mean_delta)/50*100), color="black", shape=21, fill=cols ) +
geom_line() +
labs(title     = "Consensus Analysis",
subtitle  = "Bubble sizes indicate uncertainty in item choice",
size      = "Consensus error (%)") +
ylab("Mean Worth Value") +
xlab("worth")  +
theme_bw() +
scale_x_discrete(limits = factor(1 ))
#p <- p + scale_size(range = c(0, 10))
p <- p +  theme(legend.position         = "top")
p <- p + geom_label_repel(aes(label     = label),
size          = 4,
box.padding   = unit(0.6, "lines"),
point.padding = unit(0.6, "lines"),
show.legend   = FALSE )
p
weights.sorted <- weights[order(rownames(weights)),]
W              <- cbind(weights.sorted ,
worth = worth$worth[match(weights.sorted$item, rownames(worth$worth)),])
W
