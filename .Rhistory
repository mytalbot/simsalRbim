filtersim = FALSE)
w_errors$errors$Iratio <- NULL
w_errors$errors$Iratio <- worth$I$Iratio
d <- w_errors$errors %>%
arrange(desc(worth)) %>%
mutate(run = i) %>%
mutate(pos = 1:n()) %>%
as.data.frame()
D <- rbind(D, d)
}
simulations <- D[D$item %in% simOpt, ] %>%
arrange((Iratio ))
#return(list(simulations,W))
return(simulations)
}
# the simulation function and param extraction ----------------------------
simwrap <- function(data=NULL, simOpt=NULL, GT=NULL, seeding=TRUE, runs=NULL,
truepos=NULL, path=NULL ){
# calculate all possible combinations and label them after the GT
combis           <- expand.grid(rep(list(0:1), length(GT)))
colnames(combis) <- GT
combis           <- combis[-1,]
combis           <- combis[order(apply(combis,1,sum)),]
# set the seeding constant or not...
if(seeding == TRUE){set.seed(123)}else{}
# do the simulation function
all <- NULL
for(i in 1:dim(combis)[1]){
CO       <- as.data.frame(combis[i,])
againsts <- names(CO)[CO==1]
res      <- nusim(data    = data,
simOpt  = simOpt,
GT      = GT,
against = as.character(againsts),
runs    = runs)
# select the best result
ordres   <- NULL
ordres   <- res[  order( res$Iratio, res$CE) ,] [1,]
all      <- rbind(all, data.frame(item    = simOpt,
amount  = length(againsts),
pos     = ordres$pos,
worth   = round(ordres$worth,2),
Iratio  = round(ordres$Iratio,2),
CE      = ordres$CE,
tp_frq  = sum(res$pos == truepos) / length(res$pos),
tp      = sum(res$pos == truepos),
total   = length(res$pos),
against = paste(againsts,collapse=",")))
}
# save when path is given
if(is.null(path)){
}else{
sink(paste(path,simOpt, " ",runs, ".txt",sep=""))
print(all)
sink()
}
return(all)
}
# Sadistics
sadistics <- function(dat=NULL, grpby=NULL, variable=NULL){
sad <- dat %>%
group_by(get(grpby)) %>%
summarise(MEAN = mean(get(variable), na.rm = TRUE),
SD   = sd  (get(variable),   na.rm = TRUE),
N    = n()) %>%
mutate(SE      = SD / sqrt(N),
lwr     = MEAN - qt(1 - (0.05 / 2), N - 1) * SE,
upr     = MEAN + qt(1 - (0.05 / 2), N - 1) * SE)
return(sad)
}
# Data: Low Valence Table for Paper -------------------------------------
data       <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_LowValence.txt")
#data       <- data[data$sideA %in% "left", ]
simOpt     <- "m5MSac"
GT         <- c("m10MSac","water", "NaCl",  "HCl" )
predat     <- bimpre (dat=data, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE ,
showPlot = "worth")
worth
# 5mSac --------------------------------------------------------------
res.m5M    <- simwrap(data    = data,
simOpt   = "m5MSac",
GT       = c("m10MSac","water", "NaCl",  "HCl" ),
runs     = 5,
truepos  = 1),
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
# S <- c(5,10,20,30,50)
# S <- c(2,3,4,5,6)
# sad <- NULL
# for(i in 1:length(S)){
#   res.m5M    <- NULL
#   res.m5M    <- simwrap(data    = data,
#                         simOpt   = "m5MSac",
#                         GT       = c("m10MSac","water", "NaCl",  "HCl" ),
#                         runs     = S[i],
#                         truepos  = 1)
#   sad <- rbind(sad, data.frame(run=S[i],
#                                sadistics(dat=res.m5M, grpby="amount" , variable="tp_frq" ) ))
#
# }
# sad
#
#
# ggplot(sad, aes(get.grpby., MEAN)) +
#   geom_bar(aes(fill = factor(run)), position = "dodge", stat="identity")
# 10MSac ------------------------------------------------------------------
res.m10M   <- simwrap(data    = data,
simOpt   = "m10MSac",
GT       = c("m5MSac","water", "NaCl",  "HCl" ),
runs     = 5,
truepos  = 2,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
# water -------------------------------------------------------------------
res.water  <- simwrap(data    = data,
simOpt   = "water",
GT       = c("m5MSac","m10MSac", "NaCl",  "HCl" ),
runs     = 5,
truepos  = 3,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
# NaCl --------------------------------------------------------------------
res.NaCl   <- simwrap(data    = data,
simOpt   = "NaCl",
GT       = c("m5MSac","m10MSac", "water",  "HCl" ),
runs     = 5,
truepos  = 4,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
# HCl ---------------------------------------------------------------------
res.HCl   <- simwrap(data    = data,
simOpt   = "HCl",
GT       = c("m5MSac","m10MSac", "water",  "NaCl" ),
runs     = 5,
truepos  = 5,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
res.m5M
res.m10M
res.m5M
# 5mSac --------------------------------------------------------------
res.m5M    <- simwrap(data    = data,
simOpt   = "m5MSac",
GT       = c("m10MSac","water", "NaCl",  "HCl" ),
runs     = 5,
truepos  = 1),
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
# 5mSac --------------------------------------------------------------
res.m5M    <- simwrap(data    = data,
simOpt   = "m5MSac",
GT       = c("m10MSac","water", "NaCl",  "HCl" ),
runs     = 5,
truepos  = 1 ,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
all <- rbind(res.m5M,
res.m10M,
res.water,
res.NaCl,
res.HCl)
write.table(all, file="C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/all Mice low valence.txt",
quote = FALSE,
col.names = NA)
# 5mSac --------------------------------------------------------------
res.m5M    <- simwrap(data    = data,
simOpt   = "m5MSac",
GT       = c("m10MSac","water", "NaCl",  "HCl" ),
runs     = 200,
truepos  = 1 ,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
res.m10M <- read.table(file="C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/m10MSac.txt", 200, header=TRUE)
res.m10M <- read.table(file="C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/m10MSac.txt", header=TRUE)
res.m10M <- read.table(file="./testfolder/PaperSimulations/figs/m10MSac.txt", header=TRUE)
res.m10M <- read.table(file="./testfolder/PaperSimulations/figs/m10MSac 200.txt", header=TRUE)
res.m10M
res.NaCl  <- read.table(file="./testfolder/PaperSimulations/figs/NaCl 200.txt", header=TRUE)
res.HCl   <- read.table(file="./testfolder/PaperSimulations/figs/HCl 200.txt", header=TRUE)
res.HCl
all <- rbind(res.m5M,
res.m10M,
res.water,
res.NaCl,
res.HCl)
all
write.table(all, file="C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/all Mice low valence.txt",
quote = FALSE,
col.names = NA)
res.m10M  <- read.table(file="./testfolder/PaperSimulations/figs/m10MSac 200.txt", header=TRUE)
res.water <- read.table(file="./testfolder/PaperSimulations/figs/water 200.txt", header=TRUE)
res.NaCl  <- read.table(file="./testfolder/PaperSimulations/figs/NaCl 200.txt", header=TRUE)
res.HCl   <- read.table(file="./testfolder/PaperSimulations/figs/HCl 200.txt", header=TRUE)
all <- rbind(res.m5M,
res.m10M,
res.water,
res.NaCl,
res.HCl)
all <- rbind(res.m5M,
all
all[,-2]
write.table(all, file="C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/all Mice low valence.txt",
quote = FALSE,
col.names = NA)
write.table(all, file="C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/all Mice low valence.txt",
quote = FALSE,
col.names = NA)
truepos
truepos=NULL
is.null(truepos)
library(simsalRbim)
library(simsalRbim)
data       <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_LargeValence.txt")
res.Almond  <- simsim(data    = data,
simOpt   = "AlmondMilk",
GT       = c("AppleJuice","water", "HCl","quinine"),
runs     = 3,
# truepos  = 1,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
res.Almond
library(simsalRbim)
# Data: Large Valence Table for Paper -------------------------------------
data        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_LargeValence.txt")
res.Almond  <- simsim(data      = data,
simOpt   = "AlmondMilk",
GT       = c("AppleJuice","water", "HCl","quinine"),
runs     = 10,
# truepos  = 1,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
library(simsalRbim)
library(simsalRbim)
# Data: Large Valence Table for Paper -------------------------------------
data        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_LargeValence.txt")
res.Almond  <- simsim(data      = data,
simOpt   = "AlmondMilk",
GT       = c("AppleJuice","water", "HCl","quinine"),
runs     = 10,
# truepos  = 1,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
warnings()
library(simsalRbim)
# Data: Large Valence Table for Paper -------------------------------------
data        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_LargeValence.txt")
res.Almond  <- simsim(data      = data,
simOpt   = "AlmondMilk",
GT       = c("AppleJuice","water", "HCl","quinine"),
runs     = 10,
# truepos  = 1,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
library(simsalRbim)
library(simsalRbim)
# Data: Large Valence Table for Paper -------------------------------------
data        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_LargeValence.txt")
res.Almond  <- simsim(data      = data,
simOpt   = "AlmondMilk",
GT       = c("AppleJuice","water", "HCl","quinine"),
runs     = 10,
# truepos  = 1,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
library(simsalRbim)
library(simsalRbim)
# Data: Large Valence Table for Paper -------------------------------------
data        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_LargeValence.txt")
res.Almond  <- simsim(data      = data,
simOpt   = "AlmondMilk",
GT       = c("AppleJuice","water", "HCl","quinine"),
runs     = 10,
# truepos  = 1,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
library(simsalRbim)
library(dplyr)
# Ze main simulation function
nusim <- function(data=NULL, simOpt=NULL, GT=NULL, against=NULL,remove=simOpt,
filter.crit = "Iratio", runs=10 ){
simulations <- NULL
# Datensatz erschaffen
default  <- data[!(data$optionA==remove | data$optionB==remove),]
#create dataframe with only Lake
testset  <- data[(data$optionA==remove| data$optionB==remove),]
combiagainst <- against
test     <- testset[(( testset$optionA %in% remove & testset$optionB %in% combiagainst) | (testset$optionA %in% combiagainst & testset$optionB %in% remove) |
( testset$optionA %in% remove & testset$optionB %in% combiagainst) | (testset$optionA %in% combiagainst & testset$optionB %in% remove) ),]
dat_sim  <- NULL
dat_sim  <- rbind(default, test)
D <- NULL
W <- NULL
for(i in 1:runs){
predat     <- bimpre (dat=dat_sim, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
nosim   <- predat[predat$sim==FALSE, ]
simdat  <- predat[predat$sim==TRUE,  ]
simdat$result  <- sample(c(1, -1), replace=TRUE, length(simdat$result)) # keine NULLEN!
ydata          <- rbind(nosim, simdat)
worth      <- bimworth(ydata    = ydata,
GT       = GT,
simOpt   = simOpt,
randOP   = FALSE,
intrans  = TRUE)
# W <- cbind(W, worth$worth)
w_errors   <- bimeval(ydata     = ydata,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
filtersim = FALSE)
w_errors$errors$Iratio <- NULL
w_errors$errors$Iratio <- worth$I$Iratio
d <- w_errors$errors %>%
arrange(desc(worth)) %>%
mutate(run = i) %>%
mutate(pos = 1:n()) %>%
as.data.frame()
D <- rbind(D, d)
}
simulations <- D[D$item %in% simOpt, ] %>%
arrange((Iratio ))
#return(list(simulations,W))
return(simulations)
}
# the simulation function and param extraction ----------------------------
simwrap <- function(data=NULL, simOpt=NULL, GT=NULL, seeding=TRUE, runs=NULL,
truepos=NULL, path=NULL ){
# calculate all possible combinations and label them after the GT
combis           <- expand.grid(rep(list(0:1), length(GT)))
colnames(combis) <- GT
combis           <- combis[-1,]
combis           <- combis[order(apply(combis,1,sum)),]
# set the seeding constant or not...
if(seeding == TRUE){set.seed(123)}else{}
# do the simulation function
all <- NULL
for(i in 1:dim(combis)[1]){
CO       <- as.data.frame(combis[i,])
againsts <- names(CO)[CO==1]
res      <- nusim(data    = data,
simOpt  = simOpt,
GT      = GT,
against = as.character(againsts),
runs    = runs)
# select the best result
ordres   <- NULL
ordres   <- res[  order( res$Iratio, res$CE) ,] [1,]
all      <- rbind(all, data.frame(item    = simOpt,
pos     = ordres$pos,
worth   = round(ordres$worth,2),
Iratio  = round(ordres$Iratio,2),
CE      = ordres$CE,
tp_frq  = sum(res$pos == truepos) / length(res$pos),
tp      = sum(res$pos == truepos),
total   = length(res$pos),
against = paste(againsts,collapse=",")))
}
# save when path is given
if(is.null(path)){
}else{
sink(paste(path,simOpt, " ",runs, ".txt",sep=""))
print(all)
sink()
}
return(all)
}
# AlmondMilk --------------------------------------------------------------
res.Almond  <- simwrap(data    = data,
simOpt   = "AlmondMilk",
GT       = c("AppleJuice","water", "HCl","quinine"),
runs     = 10,
truepos  = 1,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
warnings()
as.character(againsts)
# Heart of the simulation function (this is an internal function of the wrapper)
nusim <- function(data=NULL, simOpt=NULL, GT=NULL, against=NULL, remove=simOpt,
filter.crit = "Iratio", runs=10 ){
simulations <- NULL
# Datensatz erschaffen
default  <- data[!(data$optionA==remove | data$optionB==remove),]
#create dataframe with only Lake
testset  <- data[(data$optionA==remove| data$optionB==remove),]
combiagainst <- against
test     <- testset[(( testset$optionA %in% remove & testset$optionB %in% combiagainst) | (testset$optionA %in% combiagainst & testset$optionB %in% remove) |
( testset$optionA %in% remove & testset$optionB %in% combiagainst) | (testset$optionA %in% combiagainst & testset$optionB %in% remove) ),]
dat_sim  <- NULL
dat_sim  <- rbind(default, test)
D <- NULL
W <- NULL
for(i in 1:runs){
predat     <- bimpre (dat=dat_sim, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
nosim   <- predat[predat$sim==FALSE, ]
simdat  <- predat[predat$sim==TRUE,  ]
simdat$result  <- sample(c(1, -1), replace=TRUE, length(simdat$result)) # keine NULLEN!
ydata          <- rbind(nosim, simdat)
worth      <- bimworth(ydata    = ydata,
GT       = GT,
simOpt   = simOpt,
randOP   = FALSE,
intrans  = TRUE)
# W <- cbind(W, worth$worth)
w_errors   <- bimeval(ydata     = ydata,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
filtersim = FALSE)
w_errors$errors$Iratio <- NULL
w_errors$errors$Iratio <- worth$I$Iratio
d <- w_errors$errors %>%
arrange(desc(worth)) %>%
mutate(run = i) %>%
mutate(pos = 1:n()) %>%
as.data.frame()
D <- rbind(D, d)
}
simulations <- D[D$item %in% simOpt, ] %>%
arrange((Iratio ))
#return(list(simulations,W))
return(simulations)
}
library(simsalRbim)
library(simsalRbim)
# Data: Large Valence Table for Paper -------------------------------------
data        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_LargeValence.txt")
res.Almond  <- simsim(data      = data,
simOpt   = "AlmondMilk",
GT       = c("AppleJuice","water", "HCl","quinine"),
runs     = 10,
# truepos  = 1,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
res.Almond  <- simsim(data      = data,
simOpt   = "AlmondMilk",
GT       = c("AppleJuice","water", "HCl","quinine"),
runs     = 10,
truepos  = 1,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
simsim
data      = data
simOpt   = "AlmondMilk"
GT       = c("AppleJuice","water", "HCl","quinine")
runs     = 10
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/"
# calculate all possible combinations and label them after the GT
combis           <- expand.grid(rep(list(0:1), length(GT)))
colnames(combis) <- GT
combis           <- combis[-1,]
combis           <- combis[order(apply(combis,1,sum)),]
if(seeding == TRUE){set.seed(123)}else{}
seeding=TRUE
# set the seeding constant or not...
if(seeding == TRUE){set.seed(123)}else{}
dim(combis)
combis
i
i=3
CO       <- as.data.frame(combis[i,])
againsts <- names(CO)[CO==1]
againsts
nusim(data    = data,
simOpt  = simOpt,
GT      = GT,
against = as.character(againsts),
runs    = runs)
# select the best result
ordres   <- NULL
ordres   <- res[  order( res$Iratio, res$CE) ,] [1,]
CO       <- as.data.frame(combis[i,])
againsts <- names(CO)[CO==1]
res      <- nusim(data    = data,
simOpt  = simOpt,
GT      = GT,
against = as.character(againsts),
runs    = runs)
# select the best result
ordres   <- NULL
ordres   <- res[  order( res$Iratio, res$CE) ,] [1,]
ordres
is.null(truepos)
truepos<-NULL
is.null(truepos)
all
all <- NULL
all <- NULL
all      <- rbind(all, data.frame(item    = simOpt,
pos     = ordres$pos,
worth   = round(ordres$worth,2),
Iratio  = round(ordres$Iratio,2),
CE      = ordres$CE,
total   = length(res$pos),
against = paste(againsts,collapse=",")))
all
library(simsalRbim)
# Data: Large Valence Table for Paper -------------------------------------
data        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_LargeValence.txt")
res.Almond  <- simsim(data      = data,
simOpt   = "AlmondMilk",
GT       = c("AppleJuice","water", "HCl","quinine"),
runs     = 10,
#truepos  = 1,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
library(simsalRbim)
library(simsalRbim)
# Data: Large Valence Table for Paper -------------------------------------
data        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_LargeValence.txt")
res.Almond  <- simsim(data      = data,
simOpt   = "AlmondMilk",
GT       = c("AppleJuice","water", "HCl","quinine"),
runs     = 5,
#truepos  = 1,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
library(simsalRbim)
library(ggplot2)
# Bubble
library(simsalRbim)
# Data: Large Valence Table for Paper -------------------------------------
data        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_LargeValence.txt")
res.Almond  <- simsim(data      = data,
simOpt   = "AlmondMilk",
GT       = c("AppleJuice","water", "HCl","quinine"),
runs     = 5,
#truepos  = 1,
path     = "C:/MHH Bleich/Packages/simsalRbim/testfolder/PaperSimulations/figs/")
