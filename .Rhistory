return(balance)
}else{
warning("You have no column with side information (left/right) in your data OR
you might have given it another name (see sidevar='sideA')")
}
}
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
bimbalance <- function(dat=NULL, sidevar="sideA"){
if(sum(names(dat) == sidevar) == 1){
# balancing
combodat        <- dat
combodat$actual <- paste(combodat$optionA, combodat$optionB, sep="")
# test actual items
combodat$test   <- paste(combodat$optionA, combodat$optionB, sep="")
uniqueCombo     <- unique(combodat$actual)
balance <- NULL
ratio <- NULL
for(i in 1:length(uniqueCombo)){
counts_R    <- dim( combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "left", ])[1]
counts_L    <- dim( combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "right", ])[1]
pairdat_R   <- combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "left", ]
pairdat_L   <- combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "right", ]
ratio       <- rbind(ratio, data.frame(comb0    = uniqueCombo[i],
type     = "actual",
counts_R = counts_R,
counts_L = counts_L,
RL_ratio = round(dim(pairdat_R)[1] / dim(pairdat_L)[1],3)))
}
# test mirrored items
combodat$actual <- paste(combodat$optionA, combodat$optionB, sep="")
combodat$test   <- paste(combodat$optionB, combodat$optionA, sep="")
uniqueCombo     <- unique(combodat$actual)
mirror_ratio <- NULL
for(i in 1:length(uniqueCombo)){
counts_R    <- dim( combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "left", ])[1]
counts_L    <- dim( combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "right", ])[1]
pairdat_R   <- combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "left", ]
pairdat_L   <- combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "right", ]
mirror_ratio<- rbind(mirror_ratio, data.frame(comb0    = unique(combodat$test )[i],
type     = "mirrored",
counts_R = counts_R,
counts_L = counts_L,
RL_ratio = round(dim(pairdat_R)[1] / dim(pairdat_L)[1],3)))
}
balance <- rbind(ratio, mirror_ratio)
return(balance)
}else{
warning("You have no column with side information (left/right) in your data OR
you might have given it another name (see sidevar='sideA')")
}
}
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
# Maus - Mice_oneLineTest1_20201102DP -------------------------------------
dat        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_oneLineTest1_20201102DP.txt")
bimbalance(dat)
dat[dat$optionA=="Fire", ]
dat[dat$optionA %in% "Cat", ]
dat
# Human Large Valence (Spring School) -------------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
dat[dat$optionA %in% "Cat", ]
dat[dat$optionA %in% "Fire", ]
library(simsalRbim)
library(ggplot2)
# Bubblesize umdrehen in certainty
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
simOpt     <- "Zacke"
GT         <- c("Zicke", "Kacke", "Huehner")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt )
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
verbose  = TRUE,
showPlot = "worth") # or "coef"
worth
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE,
ylim      = c(0,1))
# remember: we want mean_delta to be high (close to 50%)
w_errors
bimristics <- function(predat=NULL, simOpt=NULL){
# How many Subjects are simulated?
BB <- predat[grepl(simOpt, predat$test, fixed = TRUE),  ]
subSimratio <- c()
for(i in 1:length(unique(BB$subjectID))){
sub            <- BB[BB$subjectID %in%  unique(BB$subjectID)[i],  ]
sub_sim        <- sum(sub$sim)
sub_full       <- sum(sub$sim==FALSE)
subSimratio[i] <- sub_sim/(sub_full + sub_sim)
}
stats <- data.frame(simOptItem      = simOpt,
subjects        = length(unique(predat$subjectID)),
subjectCoverage = 1-mean(subSimratio),
naturalTies     = sum(predat$tie==TRUE & predat$sim ==FALSE),
NoOfSims        = sum(predat$tie==TRUE & predat$sim ==TRUE),
pref_A          = sum(predat$result ==  1),
pref_B          = sum(predat$result == -1),
totalTests      = dim(predat)[1] )
return(stats)
}
bimristics(predat=predat, simOpt="Zicke")
library(simsalRbim)
bimdiag   <- function(dat=NULL, simOpt=NULL, GT=NULL, label=NULL){
printf  <- function(...) cat(sprintf(...))
predat  <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
testsubjects  <- length(unique(dat[ (dat$optionA==simOpt | dat$optionB==simOpt), "subjectID"]))
totalSubjects <- length(unique(predat$subjectID))
dia     <- data.frame(simOpt                = simOpt,
subjects              = totalSubjects,
simOptSubjectCoverage = paste(testsubjects/totalSubjects*100, "% (",testsubjects," of ",totalSubjects,")",sep=""),
natural_ties          = sum(predat$result==   0),
res_A                 = sum(predat$result==   1),
res_B                 = sum(predat$result==  -1),
total_tests           = dim(predat)[1],
filled                = sum(predat$sim),
Iratio                = round(bimintrans(predat)$Iratio,4))
if(is.null(label)){
dia   <- dia
} else{
dia   <- cbind(study=label, dia)
}
return(dia)
}
dat       <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_oneLineTest2_20201102DP.txt")
mouse_hi  <- bimdiag(dat=dat, simOpt="AppleJuice", GT=c("AlmondMilk","water","HCl","quinine"), label="Mouse high valence")
mouse_hi
library(simsalRbim)
bimdiag   <- function(dat=NULL, simOpt=NULL, GT=NULL, label=NULL){
printf  <- function(...) cat(sprintf(...))
predat  <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
testsubjects  <- length(unique(dat[ (dat$optionA==simOpt | dat$optionB==simOpt), "subjectID"]))
totalSubjects <- length(unique(predat$subjectID))
dia     <- data.frame(simOpt                = simOpt,
subjects              = totalSubjects,
simOptSubjectCoverage = paste(testsubjects/totalSubjects*100, "% (",testsubjects," of ",totalSubjects,")",sep=""),
natural_ties          = sum(predat$result==   0),
res_A                 = sum(predat$result==   1),
res_B                 = sum(predat$result==  -1),
total_tests           = dim(predat)[1],
filled                = sum(predat$sim),
Iratio                = round(bimintrans(predat)$Iratio,4))
if(is.null(label)){
dia   <- dia
} else{
dia   <- cbind(study=label, dia)
}
return(dia)
}
# Overview
dat       <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_oneLineTest2_20201102DP.txt")
mouse_hi  <- bimdiag(dat=dat, simOpt="AppleJuice", GT=c("AlmondMilk","water","HCl","quinine"), label="Mouse high valence")
mouse_hi
library(simsalRbim)
bimristics
library(simsalRbim)
library(dplyr)
library(ggplot2)
# Human high valence -----------------------------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
# Original Worthplot ####################################
predat     <- bimpre (dat=dat, GT=c("Frustrated","Crow","War","Cat","Doctor", "Fire"), simOpt= "Lake")
bimristics(predat=predat, simOpt="Lake")
bimristics <- function(predat=NULL, simOpt=NULL){
# How many Subjects are simulated?
BB <- predat[grepl(simOpt, predat$test, fixed = TRUE),  ]
subSimratio <- c()
for(i in 1:length(unique(BB$subjectID))){
sub            <- BB[BB$subjectID %in%  unique(BB$subjectID)[i],  ]
sub_sim        <- sum(sub$sim)
sub_full       <- sum(sub$sim==FALSE)
subSimratio[i] <- sub_sim/(sub_full + sub_sim)
}
stats <- data.frame(simOptItem      = simOpt,
subjects        = length(unique(predat$subjectID)),
subjectCoverage = 1-mean(subSimratio),
naturalTies     = sum(predat$tie==TRUE & predat$sim ==FALSE),
NoOfSims        = sum(predat$tie==TRUE & predat$sim ==TRUE),
pref_A          = sum(predat$result ==  1),
pref_B          = sum(predat$result == -1),
totalTests      = dim(predat)[1] )
return(stats)
}
# Human high valence -----------------------------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
# Original Worthplot ####################################
predat     <- bimpre (dat=dat, GT=c("Frustrated","Crow","War","Cat","Doctor", "Fire"), simOpt= "Lake")
bimristics(predat=predat, simOpt="Lake")
bimbalance(dat)
bimbalance <- function(dat=NULL, sidevar="sideA"){
if(sum(names(dat) == sidevar) == 1){
# balancing
combodat        <- dat
combodat$actual <- paste(combodat$optionA, combodat$optionB, sep="")
# test actual items
combodat$test   <- paste(combodat$optionA, combodat$optionB, sep="")
uniqueCombo     <- unique(combodat$actual)
balance <- NULL
ratio <- NULL
for(i in 1:length(uniqueCombo)){
counts_R    <- dim( combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "left", ])[1]
counts_L    <- dim( combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "right", ])[1]
pairdat_R   <- combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "left", ]
pairdat_L   <- combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "right", ]
ratio       <- rbind(ratio, data.frame(comb0    = uniqueCombo[i],
type     = "actual",
counts_R = counts_R,
counts_L = counts_L,
RL_ratio = round(dim(pairdat_R)[1] / dim(pairdat_L)[1],3)))
}
# test mirrored items
combodat$actual <- paste(combodat$optionA, combodat$optionB, sep="")
combodat$test   <- paste(combodat$optionB, combodat$optionA, sep="")
uniqueCombo     <- unique(combodat$actual)
mirror_ratio <- NULL
for(i in 1:length(uniqueCombo)){
counts_R    <- dim( combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "left", ])[1]
counts_L    <- dim( combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "right", ])[1]
pairdat_R   <- combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "left", ]
pairdat_L   <- combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "right", ]
mirror_ratio<- rbind(mirror_ratio, data.frame(comb0    = unique(combodat$test )[i],
type     = "mirrored",
counts_R = counts_R,
counts_L = counts_L,
RL_ratio = round(dim(pairdat_R)[1] / dim(pairdat_L)[1],3)))
}
balance <- rbind(ratio, mirror_ratio)
return(balance)
}else{
warning("You have no column with side information (left/right) in your data OR
you might have given it another name (see sidevar='sideA')")
}
}
# Human high valence -----------------------------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
predat     <- bimpre (dat=dat, GT=c("Frustrated","Crow","War","Cat","Doctor", "Fire"), simOpt= "Lake")
bimristics(predat=predat, simOpt="Lake")
source('C:/MHH Bleich/Packages/simsalRbim/R/bimristics.R')
source('C:/MHH Bleich/Packages/simsalRbim/R/bimristics.R')
library(simsalRbim)
library(simsalRbim)
library(dplyr)
library(ggplot2)
# Human high valence -----------------------------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
predat     <- bimpre (dat=dat, GT=c("Frustrated","Crow","War","Cat","Doctor", "Fire"), simOpt= "Lake")
bimristics(predat=predat, simOpt="Lake")
bimristics
dat[dat$optionA %in% "Lake" & dat$optionB %in% "Fire", ]
dat[dat$optionA %in% "Fire" & dat$optionB %in% "Lake", ]
combodat       <- dat
combodat$test1  <- paste(combodat$optionA, combodat$optionB, sep="")
combodat$test2  <- paste(combodat$optionB, combodat$optionA, sep="")
uniqueCombo1    <- unique(combodat$test1)
uniqueCombo2    <- unique(combodat$test2)
ratio1 <- NULL
for(i in 1:length(uniqueCombo1)){
pairdat_L   <- combodat[combodat$test1 %in% uniqueCombo1[i] & combodat$sideA %in% "left", ]
pairdat_R   <- combodat[combodat$test1 %in% uniqueCombo1[i] & combodat$sideA %in% "right", ]
ratio1      <- rbind(ratio1, data.frame(combo  = uniqueCombo1[i],
ratio  = dim(pairdat_R)[1] / dim(pairdat_L)[1]))
twistdat <- ifelse( dim(combodat[combodat$test1 %in% combodat$test2 [i],])[1] ==0, 0,
combodat[combodat$test1 %in% combodat$test2 [1],])
print(twistdat)
}
bimbalance <- function(dat=NULL, sidevar="sideA"){
if(sum(names(dat) == sidevar) == 1){
# balancing
combodat        <- dat
combodat$actual <- paste(combodat$optionA, combodat$optionB, sep="")
# test actual items
combodat$test   <- paste(combodat$optionA, combodat$optionB, sep="")
uniqueCombo     <- unique(combodat$actual)
balance <- NULL
ratio <- NULL
for(i in 1:length(uniqueCombo)){
counts_R    <- dim( combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "left", ])[1]
counts_L    <- dim( combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "right", ])[1]
pairdat_R   <- combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "left", ]
pairdat_L   <- combodat[combodat$test %in% uniqueCombo[i] & combodat$sideA %in% "right", ]
ratio       <- rbind(ratio, data.frame(comb0    = uniqueCombo[i],
type     = "actual",
counts_R = counts_R,
counts_L = counts_L,
RL_ratio = round(dim(pairdat_R)[1] / dim(pairdat_L)[1],3)))
}
balance <- ratio
return(balance)
}else{
warning("You have no column with side information (left/right) in your data OR
you might have given it another name (see sidevar='sideA')")
}
}
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
head(dat)
library(simsalRbim)
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
library(simsalRbim)
library(dplyr)
library(ggplot2)
# Human high valence -----------------------------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
library(simsalRbim)
library(simsalRbim)
library(dplyr)
library(ggplot2)
# Human high valence -----------------------------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
library(simsalRbim)
library(simsalRbim)
library(dplyr)
library(ggplot2)
# Human high valence -----------------------------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
bimbalance(dat)
dat
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
dat        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_oneLineTest1_20201102DP.txt")
bimbalance(dat)
# Human Large Valence (Spring School) -------------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
dat        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Rhesus_oneLine_20201116DP.txt")
bimbalance(dat)
library(simsalRbim)
pkgdown::build_site()
library(simsalRbim)
library(ggplot2)
# Bubblesize umdrehen in certainty
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
simOpt     <- "Zacke"
GT         <- c("Zicke", "Kacke", "Huehner")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt )
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
verbose  = TRUE,
showPlot = "worth") # or "coef"
worth
bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = FALSE,
showPlot = "worth",
ylim     = c(0,0.8))
library(simsalRbim)
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE,
ylim      = c(0,1))
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
verbose  = TRUE,
showPlot = "worth") # or "coef"
worth
w_errors   <- bimeval(ydata     = predat,
worth     = worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE,
ylim      = c(0,0.8))
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE,
ylim      = c(0,1))
library(simsalRbim)
pkgdown::build_site()
library(simsalRbim)
pkgdown::build_site()
pkgdown::build_site()
library(simsalRbim)
pkgdown::build_site()
library(simsalRbim)
library(simsalRbim)
pkgdown::build_site()
library(simsalRbim)
pkgdown::build_site()
library(simsalRbim)
library(simsalRbim)
# Human high valence -----------------------------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
predat     <- bimpre (dat=dat, GT=c("Frustrated","Crow","War","Cat","Doctor", "Fire"), simOpt= "Lake")
bimristics(predat=predat, simOpt="Lake")
worth      <- bimworth(ydata    = predat,
GT       = c("Frustrated","Crow","War","Cat","Doctor", "Fire"),
simOpt   = "Lake",
intrans  = TRUE,
verbose  = TRUE,
ylim     = c(0,0.55),
showPlot = "worth") # or "coef"
worth
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
dat        <- bimload("path to.../human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
predat     <- bimpre (dat=dat, GT=c("Frustrated","Crow","War","Cat","Doctor", "Fire"), simOpt= "Lake")
bimristics(predat=predat, simOpt="Lake")
bimristics(predat=predat, simOpt="Fire")
predat     <- bimpre (dat=dat, GT=c("Frustrated","Crow","War","Cat","Doctor", "Fire"), simOpt= "Lake")
bimristics(predat=predat, simOpt="Lake")
dat        <- bimload("path to.../human_LagreValenceRange_SpringSchool.txt")
bimbalance(dat)
library(simsalRbim)
library(ggplot2)
# Bubblesize umdrehen in certainty
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
simOpt     <- "Zacke"
GT         <- c("Zicke", "Kacke", "Huehner")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt )
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = FALSE,
showPlot = "worth",
ylim     = c(0,0.8))
worth
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE,
ylim      = c(0,1))
# remember: we want mean_delta to be high (close to 50%)
w_errors
### Wishlist umsetzen
p <- w_errors$p
p <- p + theme(plot.title        = element_text(hjust = 0.5))
p <- p +  theme(legend.position  = "bottom", legend.justification = c("left"))
p <- p+ labs(title = "Very important title") +
theme(plot.title = element_text(hjust = 0.5) )
p <- p + annotate("text", x = 0.6, y = 0.44, size=4.5,
label = paste("Mean CE=",round(mean(w_errors$errors$CE),2),"% ",sep=""))
p
# ZickeZacke w/ HoiHoiHoi item  -------------------------------------------
library(simsalRbim)
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c("Zicke","Zacke","Huehner", "Kacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE ,
subtitle  = NULL,
ylim      = c(0,1))
w_errors
p <- w_errors$p
p <- p + theme(plot.title        = element_text(hjust = 0.5))
p <- p +  theme(legend.position  = "bottom", legend.justification = c("left"))
p <- p+ labs(title = "Very important title") +
theme(plot.title = element_text(hjust = 0.5) )
p <- p + annotate("text", x = 0.6, y = 0.44, size=4.5,
label = paste("Mean CE=",round(mean(w_errors$errors$CE),2),"% ",sep=""))
# p <- p + scale_size_continuous(name = "Consensus error (%)",
#                             breaks  = c(0,5,15,20),
#                             limits  = c(0, 20),
#                             range   = c(0, 2) )
p
# uninformed simulation  - cutoff determination
cutoff     <- bimUninformed(ydat       = predat,
GT         = GT,
simOpt     = simOpt,
limitToRun = 50,
ylim       = c(-1,2) )
cutoff$cutoff
# uninformed simulation  - Use the cutoff in the item positioning
pos        <- bimpos(ydata=predat, GT=GT, simOpt=simOpt, limitToRun=cutoff$cutoff, showPlot=TRUE )
pos$simerrors
# INFORMED Simulation - INTRANSITIVITY RUN
frqnc      <- bimsim(rawdat      = dat,
GT          = GT,
simOpt      = simOpt,
limitToRun  = 50,
tcut        = 0.90,
filter.crit ="Iratio",
ylim        = c(0,0.6))
frqnc$frq
