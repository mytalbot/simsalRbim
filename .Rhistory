simOpt   = simOpt,
intrans  = TRUE,
verbose  = TRUE,
showPlot = "worth") # or "coef"
worth
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE  )
w_errors
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
verbose  = TRUE,
showPlot = "worth") # or "coef"
worth
library(simsalRbim)
library(simsalRbim)
# Bubblesize umdrehen in certainty
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
simOpt     <- "Zicke"
GT         <- c("Huehner", "Kacke", "Zacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt )
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
verbose  = TRUE,
showPlot = "worth") # or "coef"
worth
dat
library(simsalRbim)
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
simOpt     <- "Zicke"
GT         <- c("Huehner", "Kacke", "Zacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt )
mydata=predat
colnames(mydata)[1]="ID"
uIDs=unique(mydata[,1])
uItems=unique(c(mydata[,2],mydata[,3]))
count=0
library(simsalRbim)
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
simOpt     <- "Zicke"
GT         <- c("Huehner", "Kacke", "Zacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt )
mydata=predat
colnames(mydata)[1]="ID"
uIDs=unique(mydata[,1])
uItems=unique(c(mydata[,2],mydata[,3]))
count=0
##################################
#There are 8 possible outcomes of sequential binary comparisons of A, B,
#and C:
#
#(A>B)&(B>C)&(A>C)=A>B>C
#(A>B)&(B>C)&(C>A)= circle (A>B>C>A, B>C>A>B, C>A>B>C)
#
#(A>B)&(C>B)&(A>C)=A>C>B
#(A>B)&(C>B)&(C>A)=C>A>B
#
#(B>A)&(B>C)&(A>C)=B>A>C
#(B>A)&(B>C)&(C>A)=B>C>A
#
#(B>A)&(C>B)&(A>C)=circle (B>A>C>B, A>C>B>A, C>B>A>C)
#(B>A)&(C>B)&(C>A)=C>B>A
#
#Six of these comparisons lead to valid outcomes, while two violate the
#assumption
#of transitivity.
#####################################
#35 possible triplets when comparing 7 items
i1=1
i2=2
i3=3
intranscount=0
tripletcount=0
for(thisID in uIDs)
{
thisData=subset(mydata, ID==thisID)
lenDataset=length(thisData[[1]])
for(i1 in 1:(length(uItems)-2))
{
for(i2 in (i1+1):(length(uItems)-1))
{
for(i3 in (i2+1):length(uItems))
{
firstI =  uItems[i1]
secondI = uItems[i2]
thirdI =  uItems[i3]
for(count in 1:lenDataset)
{
#find i1 vs i2
if(thisData[count,2]==firstI & thisData[count,3]==secondI) if(thisData[count,7]==1) AoverB=1 else AoverB=0 # A>B
if(thisData[count,2]==secondI & thisData[count,3]==firstI) if(thisData[count,7]==0) AoverB=1 else AoverB=0 # A>B
#find i2 vs i3
if(thisData[count,2]==secondI & thisData[count,3]==thirdI) if(thisData[count,7]==1) BoverC=1 else BoverC=0 # A>B
if(thisData[count,2]==thirdI & thisData[count,3]==secondI) if(thisData[count,7]==0) BoverC=1 else BoverC=0 # A>B
#find i3 vs i1
if(thisData[count,2]==thirdI & thisData[count,3]==firstI)  if(thisData[count,7]==1) CoverA=1 else CoverA=0 # A>B
if(thisData[count,2]==firstI & thisData[count,3]==thirdI)  if(thisData[count,7]==0) CoverA=1 else CoverA=0 # A>B
}
#Invalid cases (A>B)&(B>C)&(C>A) OR (B>A)&(C>B)&(A>C)
if(AoverB & BoverC & CoverA)
{
print(paste(thisID,":",firstI,">",secondI,">",thirdI,">",firstI,
"(clockwise A>B>C>A)"))
intranscount=intranscount+1
}
if(!AoverB & !BoverC & !CoverA)
{
print(paste(thisID,":",firstI,">",thirdI,">",secondI,">",firstI,
"(counterclockwise A>C>B>A)"))
intranscount=intranscount+1
}
tripletcount=tripletcount+1
}
}
}
}
print(paste(intranscount, "intransitive triplets from ", tripletcount,
"total triplets"))
dat
predat
predat[predat$subjectID=="eins",]
library(simsalRbim)
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
simOpt     <- "Zicke"
GT         <- c("Huehner", "Kacke", "Zacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt )
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
verbose  = TRUE,
showPlot = "worth") # or "coef"
worth
# ZickeZacke w/ HoiHoiHoi item  -------------------------------------------
library(simsalRbim)
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c("Zicke","Zacke","Huehner", "Kacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
# ZickeZacke w/ HoiHoiHoi item  -------------------------------------------
library(simsalRbim)
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c("Zicke","Zacke","Huehner", "Kacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
# ZickeZacke w/ HoiHoiHoi item  -------------------------------------------
library(simsalRbim)
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c("Zicke","Zacke","Huehner", "Kacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
simOpt     <- "Zicke"
GT         <- c("Huehner", "Kacke", "Zacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt )
mydata=predat
colnames(mydata)[1]="ID"
uIDs=unique(mydata[,1])
uItems=unique(c(mydata[,2],mydata[,3]))
count=0
##################################
#There are 8 possible outcomes of sequential binary comparisons of A, B,
#and C:
#
#(A>B)&(B>C)&(A>C)=A>B>C
#(A>B)&(B>C)&(C>A)= circle (A>B>C>A, B>C>A>B, C>A>B>C)
#
#(A>B)&(C>B)&(A>C)=A>C>B
#(A>B)&(C>B)&(C>A)=C>A>B
#
#(B>A)&(B>C)&(A>C)=B>A>C
#(B>A)&(B>C)&(C>A)=B>C>A
#
#(B>A)&(C>B)&(A>C)=circle (B>A>C>B, A>C>B>A, C>B>A>C)
#(B>A)&(C>B)&(C>A)=C>B>A
#
#Six of these comparisons lead to valid outcomes, while two violate the
#assumption
#of transitivity.
#####################################
#35 possible triplets when comparing 7 items
i1=1
i2=2
i3=3
intranscount=0
tripletcount=0
for(thisID in uIDs)
{
thisData=subset(mydata, ID==thisID)
lenDataset=length(thisData[[1]])
for(i1 in 1:(length(uItems)-2))
{
for(i2 in (i1+1):(length(uItems)-1))
{
for(i3 in (i2+1):length(uItems))
{
firstI =  uItems[i1]
secondI = uItems[i2]
thirdI =  uItems[i3]
for(count in 1:lenDataset)
{
#find i1 vs i2
if(thisData[count,2]==firstI & thisData[count,3]==secondI) if(thisData[count,7]==1) AoverB=1 else AoverB=0 # A>B
if(thisData[count,2]==secondI & thisData[count,3]==firstI) if(thisData[count,7]==-1) AoverB=1 else AoverB=0 # A>B
#find i2 vs i3
if(thisData[count,2]==secondI & thisData[count,3]==thirdI) if(thisData[count,7]==1) BoverC=1 else BoverC=0 # A>B
if(thisData[count,2]==thirdI & thisData[count,3]==secondI) if(thisData[count,7]==-1) BoverC=1 else BoverC=0 # A>B
#find i3 vs i1
if(thisData[count,2]==thirdI & thisData[count,3]==firstI)  if(thisData[count,7]==1) CoverA=1 else CoverA=0 # A>B
if(thisData[count,2]==firstI & thisData[count,3]==thirdI)  if(thisData[count,7]==-1) CoverA=1 else CoverA=0 # A>B
}
#Invalid cases (A>B)&(B>C)&(C>A) OR (B>A)&(C>B)&(A>C)
if(AoverB & BoverC & CoverA)
{
print(paste(thisID,":",firstI,">",secondI,">",thirdI,">",firstI,
"(clockwise A>B>C>A)"))
intranscount=intranscount+1
}
if(!AoverB & !BoverC & !CoverA)
{
print(paste(thisID,":",firstI,">",thirdI,">",secondI,">",firstI,
"(counterclockwise A>C>B>A)"))
intranscount=intranscount+1
}
tripletcount=tripletcount+1
}
}
}
}
print(paste(intranscount, "intransitive triplets from ", tripletcount,
"total triplets"))
library(simsalRbim)
# Bubblesize umdrehen in certainty
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
simOpt     <- "Zicke"
GT         <- c("Huehner", "Kacke", "Zacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt )
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
verbose  = TRUE,
showPlot = "worth") # or "coef"
worth
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE  )
w_errors
# ZickeZacke w/ HoiHoiHoi item  -------------------------------------------
library(simsalRbim)
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c("Zicke","Zacke","Huehner", "Kacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE )
w_errors
# uninformed simulation  - cutoff determination
cutoff     <- bimUninformed(ydat       = predat,
GT         = GT,
simOpt     = simOpt,
limitToRun = 50,
ylim       = c(-1,2) )
cutoff$cutoff
pos        <- bimpos(ydata=predat, GT=GT, simOpt=simOpt, limitToRun=cutoff$cutoff, showPlot=TRUE )
pos$simerrors
frqnc      <- bimsim(rawdat      = dat,
GT          = GT,
simOpt      = simOpt,
limitToRun  = 50,
tcut        = 0.9,
filter.crit ="Iratio",
ylim        = c(0,0.45))
frqnc$frq
library(simsalRbim)
# INFORMED Simulation - CONSENSUS ERROR RUN
frqnc      <- bimsim(rawdat      = dat,
GT          = GT,
simOpt      = simOpt,
limitToRun  = 50,
tcut        = 0.9,
filter.crit ="CE",
ylim        = c(0,0.45))
frqnc$frq
frqnc      <- bimsim(rawdat      = dat,
GT          = GT,
simOpt      = simOpt,
limitToRun  = 50,
tcut        = 0.9,
filter.crit ="Iratio",
ylim        = c(0,0.45))
frqnc$frq
# Human Large Valence (Spring School) -------------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/human_LagreValenceRange_SpringSchool.txt")
simOpt     <- "Lake"
GT         <- c("Frustrated","Crow","War","Cat","Doctor", "Fire")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
showPlot = "worth")
worth
# Maus - Mice_oneLineTest1_20201102DP -------------------------------------
dat        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_oneLineTest1_20201102DP.txt")
simOpt     <- "water"
GT         <- c("HCl","m5MSac",  "m10MSac", "NaCl"   )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE ,
showPlot = "worth")
worth
# Maus - Mice_oneLineTest1_20201102DP -------------------------------------
dat        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Mice_oneLineTest1_20201102DP.txt")
simOpt     <- "water"
GT         <- c("HCl","m5MSac",  "m10MSac", "NaCl"   )
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0, minQuantity=0)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE ,
showPlot = "worth")
worth
# Monkey ------------------------------------------------------------------
# Note: Banana and Grape are equal when deviation = 0. Change deviation to 10! ;-)
dat        <- bimload ("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/Rhesus_oneLine_20201116DP.txt")
simOpt     <- "water"
GT         <- c("banana", "grape", "NaCl", "quinine")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt, deviation=0 )
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE ,
showPlot = "worth")
worth
pkgdown::build_site()
# ZickeZacke w/ HoiHoiHoi item  -------------------------------------------
library(simsalRbim)
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c("Zicke","Zacke","Huehner", "Kacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE )
w_errors
# uninformed simulation  - cutoff determination
cutoff     <- bimUninformed(ydat       = predat,
GT         = GT,
simOpt     = simOpt,
limitToRun = 50,
ylim       = c(-1,2) )
cutoff$cutoff
# uninformed simulation  - Use the cutoff in the item positioning
pos        <- bimpos(ydata=predat, GT=GT, simOpt=simOpt, limitToRun=cutoff$cutoff, showPlot=TRUE )
pos$simerrors
# INFORMED Simulation - INTRANSITIVITY RUN
frqnc      <- bimsim(rawdat      = dat,
GT          = GT,
simOpt      = simOpt,
limitToRun  = 50,
tcut        = 0.9,
filter.crit ="Iratio",
ylim        = c(0,0.45))
frqnc$frq
frqnc      <- bimsim(rawdat      = dat,
GT          = GT,
simOpt      = simOpt,
limitToRun  = 50,
tcut        = 0.1,
filter.crit ="Iratio",
ylim        = c(0,0.45))
frqnc$frq
library(simsalRbim)
# Bubblesize umdrehen in certainty
#  Perfect use case with no randomized items ------------------------------
dat        <- bimload("C:/MHH Bleich/Aktuelles/PrePrefPackage 2020/data/ZickeZackelinear.txt")
simOpt     <- "Zicke"
GT         <- c("Huehner", "Kacke", "Zacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt )
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
intrans  = TRUE,
verbose  = TRUE,
showPlot = "worth") # or "coef"
worth
w_errors   <- bimeval(ydata     = predat,
worth     = worth$worth,
GT        = GT,
simOpt    = simOpt,
showPlot  = TRUE  )
# remember: we want mean_delta to be high (close to 50%)
w_errors
# ZickeZacke w/ HoiHoiHoi item  -------------------------------------------
library(simsalRbim)
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c("Zicke","Zacke","Huehner", "Kacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
# ZickeZacke w/ HoiHoiHoi item  -------------------------------------------
library(simsalRbim)
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c("Zicke","Zacke","Huehner", "Kacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
# ZickeZacke w/ HoiHoiHoi item  -------------------------------------------
library(simsalRbim)
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c("Zicke","Zacke","Huehner", "Kacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
# ZickeZacke w/ HoiHoiHoi item  -------------------------------------------
library(simsalRbim)
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c("Zicke","Zacke","Huehner", "Kacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
# ZickeZacke w/ HoiHoiHoi item  -------------------------------------------
library(simsalRbim)
dat        <- ZickeZacke
simOpt     <- "HoiHoiHoi"
GT         <- c("Zicke","Zacke","Huehner", "Kacke")
predat     <- bimpre (dat=dat, GT=GT, simOpt=simOpt)
worth      <- bimworth(ydata    = predat,
GT       = GT,
simOpt   = simOpt,
randOP   = TRUE,
intrans  = TRUE,
showPlot = "worth")
worth
